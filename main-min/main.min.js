var __reflect = this && this.__reflect || function(e, t, o) {
    e.__class__ = t,
    o ? o.push(t) : o = [t],
    e.__types__ = e.__types__ ? o.concat(e.__types__) : o
}
  , __extends = this && this.__extends || function(e, t) {
    function o() {
        this.constructor = e
    }
    for (var n in t)
        t.hasOwnProperty(n) && (e[n] = t[n]);
    e.prototype = null === t ? Object.create(t) : (o.prototype = t.prototype,
    new o)
}
  , BaseControl = function() {
    function e() {
        this.gameScene = App.SceneManager.getScene(SceneConst.GAME)
    }
    return e
}();

__reflect(BaseControl.prototype, "BaseControl");

var BaseScene = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.percentWidth = 100,
        t.percentHeight = 100,
        t
    }
    return __extends(t, e),
    t.prototype.onEnable = function(e) {
        void 0 === e && (e = null)
    }
    ,
    t.prototype.onRemove = function() {}
    ,
    t
}(eui.Component);

__reflect(BaseScene.prototype, "BaseScene");
var BasePanel = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.percentWidth = 100,
        t.percentHeight = 100,
        t
    }
    return __extends(t, e),
    t.prototype.onEnable = function(e) {
        void 0 === e && (e = null)
    }
    ,
    t.prototype.onRemove = function() {}
    ,
    t
}(eui.Component);
__reflect(BasePanel.prototype, "BasePanel");
var SingleClass = function() {
    function e() {}
    return e.getInstance = function() {
        for (var e = [], t = 0; t < arguments.length; t++)
            e[t] = arguments[t];
        var o = this;
        if (!o._instance) {
            var n = e.length;
            0 == n ? o._instance = new o : 1 == n ? o._instance = new o(e[0]) : 2 == n ? o._instance = new o(e[0],e[1]) : 3 == n && (o._instance = new o(e[0],e[1],e[2]))
        }
        return o._instance
    }
    ,
    e
}();
__reflect(SingleClass.prototype, "SingleClass");
var ChessControl = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.init(),
        t
    }
    return __extends(t, e),
    t.prototype.init = function() {
        this.chessGroup = this.gameScene.chessGroup,
        this.chessNumTipPool = App.ObjectPool.getPool("ChessNumTip"),
        this.chessNumTipList = [],
        this.chessList = [],
        this.chessPosList = [],
        this.chessSortList = [],
        this.oriChessPosList = [];
        for (var e = 0; e < GameConst.MAX_PLAYER_NUM; e++) {
            this.chessList[e] = [],
            this.chessPosList[e] = [],
            this.oriChessPosList[e] = [];
            for (var t = 0; t < GameConst.MAX_CHESS_NUM; t++) {
                var o = this.chessGroup.getChildAt(e * GameConst.MAX_CHESS_NUM + t);
                this.chessList[e].push(o),
                this.chessSortList.push(o),
                this.chessPosList[e].push(new egret.Point(o.x,o.y)),
                this.oriChessPosList[e].push(new egret.Point(o.x,o.y)),
                o.roleColor = e,
                o.chessType = t,
                o.status = ChessStatusEnum.DeActive
            }
        }
    }
    ,
    t.prototype.setChess = function() {
        for (var e, t = App.DataCenter.roleTypeList, o = t.length, n = 0; o > n; n++)
            if (e = t[n],
            e == RoleTypeEnum.Role)
                ;
            else if (e == RoleTypeEnum.Computer)
                ;
            else if (e == RoleTypeEnum.Close)
                for (var s = this.chessList[n], i = s.length, r = 0; i > r; r++)
                    s[r].visible = !1
    }
    ,
    t.prototype.resetChess = function() {
        for (var e = this.chessList.length, t = 0; e > t; t++) {
            this.stopChessJump(t);
            for (var o = this.chessList[t], n = this.chessPosList[t], s = 0; e > s; s++) {
                var i = o[s];
                i.setChessSkin(),
                i.x = n[s].x,
                i.y = n[s].y,
                i.visible = !0,
                i.bJumping = !1,
                i.status = ChessStatusEnum.DeActive,
                i.curIndex = 0,
                i.pathNode = null
            }
        }
        this.sortChess()
    }
    ,
    t.prototype.getChessFinish = function() {
        for (var e = [], t = 0; t < GameConst.MAX_PLAYER_NUM; t++) {
            for (var o = 0, n = 0; n < GameConst.MAX_CHESS_NUM; n++) {
                var s = this.chessList[t][n];
                s.status == ChessStatusEnum.Finish && o++
            }
            e.push(o)
        }
        return e
    }
    ,
    t.prototype.addChessTouch = function() {
        this.chessGroup.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onChessTouch, this)
    }
    ,
    t.prototype.removeChessTouch = function() {
        this.chessGroup.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onChessTouch, this)
    }
    ,
    t.prototype.onChessTouch = function(e) {
        var t = this
          , o = this.gameScene.curRoleColor
          , n = e.target;
        if (!this.gameScene.bPause && n && n.roleColor == o) {
            this.getChessListByStatus(o, ChessStatusEnum.DeActive),
            this.getChessListByStatus(o, ChessStatusEnum.Active);
            n.status == ChessStatusEnum.DeActive && this.gameScene.curDiceNum == GameConst.NUM_6 ? (this.removeChessTouch(),
            this.removeChessNumTipTouch(),
            this.gameScene.headUIControl.stopCountDown(),
            this.sortChessTop(n),
            this.gameScene.pathControl.moveOutAirport(n, function() {
                t.gameScene.changeState(GameStatusEnum.Action)
            })) : n.status == ChessStatusEnum.Active && (this.checkMultiChess(n.pathNode) || (this.removeChessTouch(),
            this.removeChessNumTipTouch(),
            this.gameScene.headUIControl.stopCountDown(),
            this.sortChessTop(n),
            this.gameScene.pathControl.moveChess([n], this.gameScene.curDiceNum, !0)))
        }
    }
    ,
    t.prototype.selectChessMove = function(e) {
        this.removeChessTouch(),
        this.removeChessNumTipTouch(),
        this.gameScene.headUIControl.stopCountDown(),
        this.sortChessTop(e),
        this.gameScene.pathControl.moveChess([e], this.gameScene.curDiceNum, !0)
    }
    ,
    t.prototype.checkMultiChess = function(e) {
        var t = e.chessList[this.gameScene.curRoleColor]
          , o = this.gameScene.pathControl.getArrayChessNum(t);
        return o > 1 ? (App.PanelManager.open(PanelConst.SELECT_CHESS, t),
        !0) : !1
    }
    ,
    t.prototype.getChessListByStatus = function(e, t) {
        for (var o = [], n = this.chessList[e], s = n.length, i = 0; s > i; i++) {
            var r = n[i];
            r.status == t && o.push(r)
        }
        return o
    }
    ,
    t.prototype.sortChess = function() {
        console.log("ChessControl >> 所有棋子排序");
        for (var e = this.chessSortList.length, t = 0; e > t; t++)
            for (var o = t + 1; e > o; o++)
                if (this.chessSortList[t].y > this.chessSortList[o].y) {
                    var n = this.chessSortList[t];
                    this.chessSortList[t] = this.chessSortList[o],
                    this.chessSortList[o] = n
                }
        for (var t = 0; e > t; t++)
            this.chessGroup.addChild(this.chessSortList[t])
    }
    ,
    t.prototype.sortChessTop = function(e) {
        console.log("ChessControl >> 当前行动单个棋子置顶"),
        this.chessGroup.addChild(e)
    }
    ,
    t.prototype.sortActionChessTop = function() {
        console.log("ChessControl >> 当前行动玩家所有棋子置顶");
        for (var e = this.gameScene.curRoleColor, t = this.chessList[e], o = t.length, n = 0; o > n; n++) {
            var s = t[n]
              , i = s.pathNode;
            if (i) {
                for (var r = -1, a = i.chessList, h = 0; 4 > h; h++)
                    for (var l = 0; 4 > l; l++) {
                        var c = a[h][l];
                        if (null != c) {
                            var p = c.parent.getChildIndex(c);
                            p > r && (r = p)
                        }
                    }
                for (var u = i.chessList[e], h = 0; 4 > h; h++) {
                    var g = u[h];
                    null != g && g.parent.setChildIndex(g, r)
                }
            }
        }
    }
    ,
    t.prototype.checkAllFinish = function() {
        for (var e = this.gameScene.curRoleColor, t = this.chessList[e], o = 0; o < t.length; o++) {
            var n = t[o];
            if (n.status != ChessStatusEnum.Finish)
                return !1
        }
        return !0
    }
    ,
    t.prototype.showHeTi = function() {
        this.hideAllHeTi(),
        console.log("显示合体");
        for (var e, t, o, n, s = this.gameScene.pathControl.pathNodeList, i = s.length, r = [], a = 0, h = 0; i > h; h++)
            if (e = s[h],
            e.totalChessNum > 1) {
                t = e.chessList,
                r = [],
                a = 0;
                for (var l = 0; l < t.length; l++) {
                    o = t[l];
                    for (var c = 0; c < o.length; c++)
                        n = o[c],
                        n && (r[a] || (r[a] = []),
                        r[a].push(n));
                    r[a] && a++
                }
                var p = this.chessNumTipPool.getObject();
                this.gameScene.chessNumTipGroup.addChild(p),
                p.show(r),
                p.pathNode = e,
                this.chessNumTipList.push(p)
            }
    }
    ,
    t.prototype.showOneHeTi = function(e, t) {
        for (var e, o, n, s, i = [], r = 0, a = this.chessNumTipList.length, h = 0; a > h; h++) {
            var l = this.chessNumTipList[h];
            if (l.pathNode == e) {
                l.pathNode = null,
                l.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onChessNumTipTouch, this),
                l.hide(),
                this.chessNumTipPool.returnObject(l),
                this.chessNumTipList.splice(h, 1);
                break
            }
        }
        if (e.totalChessNum > 1) {
            o = e.chessList,
            i = [],
            r = 0;
            for (var c = 0; c < o.length; c++) {
                n = o[c];
                for (var p = 0; p < n.length; p++)
                    s = n[p],
                    s && (i[r] || (i[r] = []),
                    i[r].push(s));
                i[r] && r++
            }
            var l = this.chessNumTipPool.getObject();
            this.gameScene.chessNumTipGroup.addChild(l),
            l.show(i),
            l.pathNode = e,
            this.chessNumTipList.push(l)
        }
    }
    ,
    t.prototype.hideAllHeTi = function() {
        console.log("隐藏所有合体");
        for (var e = this.chessNumTipList.length, t = 0; e > t; t++) {
            var o = this.chessNumTipList[t];
            o.pathNode = null,
            o.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onChessNumTipTouch, this),
            o.hide(),
            this.chessNumTipPool.returnObject(o)
        }
        this.chessNumTipList.length = 0
    }
    ,
    t.prototype.addChessNumTipTouch = function() {
        for (var e = this.chessNumTipList.length, t = 0; e > t; t++)
            this.chessNumTipList[t].addEventListener(egret.TouchEvent.TOUCH_TAP, this.onChessNumTipTouch, this)
    }
    ,
    t.prototype.removeChessNumTipTouch = function() {
        for (var e = this.chessNumTipList.length, t = 0; e > t; t++)
            this.chessNumTipList[t].removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onChessNumTipTouch, this)
    }
    ,
    t.prototype.onChessNumTipTouch = function(e) {
        var t = e.target;
        this.gameScene.chessControl.checkMultiChess(t.pathNode)
    }
    ,
    t.prototype.rotateChessPos = function() {
        console.log("ChessControl >> 旋转棋子位置");
        var e = App.DataCenter.roleTypeList;
        if (null != e) {
            for (var t = e.length, o = 0; t > o && e[o] != RoleTypeEnum.Role; o++)
                ;
            if (o == t)
                for (o = 0; t > o && e[o] != RoleTypeEnum.Computer; o++)
                    ;
            var n = o
              , s = this.gameScene.pathControl.rolePathNodeList
              , i = this.gameScene.pathControl.oriRolePathNodeList
              , r = this.gameScene.pathControl.flyPathNodeList
              , a = this.gameScene.pathControl.oriFlyPathNodeList
              , h = this.gameScene.headUIControl.headList
              , l = this.gameScene.headUIControl.oriHeadList;
            for (o = 0; 4 > o; o++) {
                var c = o + n + 4 - 2;
                c >= 4 && (c %= 4),
                this.chessPosList[c] = this.oriChessPosList[o],
                s[c] = i[o],
                r[c] = a[o],
                r[c][0].type = [PathNodeEnum.FlyStart0, PathNodeEnum.FlyStart1, PathNodeEnum.FlyStart2, PathNodeEnum.FlyStart3][c],
                h[c] = l[o],
                h[c].changeHeadTexture(c)
            }
            this.gameScene.viewUIControl.changeChessBg(n)
        }
    }
    ,
    t.prototype.chessJump = function(e, t) {
        console.log("棋子跳动:", e);
        for (var o = this.gameScene.chessControl.getChessListByStatus(e, ChessStatusEnum.Active), n = o.length, s = 0; n > s; s++) {
            var i = o[s];
            i.oriJumpY = i.y,
            i.bJumping = !0,
            egret.Tween.get(i, {
                loop: !0
            }).to({
                y: i.oriJumpY - 10
            }, 200).to({
                y: i.oriJumpY
            }, 200)
        }
        if (t == GameConst.NUM_6) {
            var r = this.gameScene.chessControl.getChessListByStatus(e, ChessStatusEnum.DeActive);
            for (n = r.length,
            s = 0; n > s; s++) {
                var i = r[s];
                i.oriJumpY = i.y,
                i.bJumping = !0,
                egret.Tween.get(i, {
                    loop: !0
                }).to({
                    y: i.oriJumpY - 10
                }, 200).to({
                    y: i.oriJumpY
                }, 200)
            }
        }
    }
    ,
    t.prototype.stopChessJump = function(e) {
        console.log("棋子停止跳动:", e);
        for (var t = this.gameScene.chessControl.getChessListByStatus(e, ChessStatusEnum.Active), o = t.length, n = 0; o > n; n++) {
            var s = t[n];
            s.bJumping && (s.bJumping = !1,
            egret.Tween.removeTweens(s),
            s.y = s.oriJumpY)
        }
        var i = this.gameScene.chessControl.getChessListByStatus(e, ChessStatusEnum.DeActive);
        for (o = i.length,
        n = 0; o > n; n++) {
            var s = i[n];
            s.bJumping && (s.bJumping = !1,
            egret.Tween.removeTweens(s),
            s.y = s.oriJumpY)
        }
    }
    ,
    t
}(BaseControl);
__reflect(ChessControl.prototype, "ChessControl");
var DeviceUtils = function(e) {
    function t() {
        return e.apply(this, arguments) || this
    }
    return __extends(t, e),
    Object.defineProperty(t.prototype, "isNative", {
        get: function() {
            return egret.Capabilities.runtimeType == egret.RuntimeType.NATIVE
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t.prototype, "isWeb", {
        get: function() {
            return egret.Capabilities.runtimeType == egret.RuntimeType.WEB
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t.prototype, "isMoile", {
        get: function() {
            return egret.Capabilities.isMobile
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t.prototype, "isPC", {
        get: function() {
            return !egret.Capabilities.isMobile
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t.prototype, "isAndroid", {
        get: function() {
            return "Android" == egret.Capabilities.os
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t.prototype, "isIos", {
        get: function() {
            return "iOS" == egret.Capabilities.os
        },
        enumerable: !0,
        configurable: !0
    }),
    t
}(SingleClass);
__reflect(DeviceUtils.prototype, "DeviceUtils");
var EffectManager = function(e) {
    function t() {
        return e.call(this) || this
    }
    return __extends(t, e),
    t.prototype.showChessFinishEffect = function(e) {
        App.Sound.playEffect(SoundConst.CHESS_FINISH),
        this.chessFinishEffect || (this.chessFinishEffect = new ChessFinishEffect),
        this.chessFinishEffect.playAnim(e)
    }
    ,
    t
}(SingleClass);
__reflect(EffectManager.prototype, "EffectManager");
var EventManager = function(e) {
    function t() {
        return e.call(this) || this
    }
    return __extends(t, e),
    t.getInstance = function() {
        return null == this.instance && (this.instance = new t),
        this.instance
    }
    ,
    t
}(egret.EventDispatcher);
__reflect(EventManager.prototype, "EventManager");
var LayerManager = function(e) {
    function t() {
        var t = e.call(this) || this
          , o = App.StageUtils.stage;
        return t.sceneLayer = new eui.UILayer,
        t.sceneLayer.percentWidth = 100,
        t.sceneLayer.percentHeight = 100,
        t.sceneLayer.touchEnabled = !1,
        o.addChild(t.sceneLayer),
        t.effectLayer = new eui.UILayer,
        t.effectLayer.percentWidth = 100,
        t.effectLayer.percentHeight = 100,
        t.effectLayer.touchEnabled = !1,
        o.addChild(t.effectLayer),
        t.panelLayer = new eui.UILayer,
        t.panelLayer.percentWidth = 100,
        t.panelLayer.percentHeight = 100,
        t.panelLayer.touchEnabled = !1,
        o.addChild(t.panelLayer),
        t.messageLayer = new eui.UILayer,
        t.messageLayer.percentWidth = 100,
        t.messageLayer.percentHeight = 100,
        t.messageLayer.touchEnabled = !1,
        o.addChild(t.messageLayer),
        t.tipLayer = new eui.UILayer,
        t.tipLayer.percentWidth = 100,
        t.tipLayer.percentHeight = 100,
        t.tipLayer.touchEnabled = !1,
        o.addChild(t.tipLayer),
        t
    }
    return __extends(t, e),
    t
}(SingleClass);
__reflect(LayerManager.prototype, "LayerManager");
var MsgBoxManager = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.messageBoxAPool = App.ObjectPool.getPool("MessageBox"),
        t
    }
    return __extends(t, e),
    t.prototype.showMsg = function(e, t, o) {
        void 0 === t && (t = null),
        void 0 === o && (o = null);
        var n = this.messageBoxAPool.getObject();
        n.showMsg(e, t, o),
        App.LayerManager.messageLayer.addChild(n)
    }
    ,
    t
}(SingleClass);
__reflect(MsgBoxManager.prototype, "MsgBoxManager");
var NumberTool = function(e) {
    function t() {
        return e.apply(this, arguments) || this
    }
    return __extends(t, e),
    t.prototype.getRandInt = function(e, t) {
        return e + Math.round(Math.random() * (t - e))
    }
    ,
    t
}(SingleClass);
__reflect(NumberTool.prototype, "NumberTool");
var ObjectPool = function(e) {
    function t() {
        var t = e.apply(this, arguments) || this;
        return t.poolList = {},
        t
    }
    return __extends(t, e),
    t.prototype.getPool = function(e, t) {
        if (void 0 === t && (t = 0),
        !this.poolList[e] && (this.poolList[e] = new Pool(e),
        0 != t))
            for (var o = egret.getDefinitionByName(e), n = this.poolList[e], s = 0; t > s; s++)
                n.returnObject(new o);
        return this.poolList[e]
    }
    ,
    t
}(SingleClass);
__reflect(ObjectPool.prototype, "ObjectPool");
var Pool = function() {
    function e(e) {
        this.className = e,
        this.list = []
    }
    return e.prototype.getObject = function() {
        if (this.list.length > 0)
            return this.list.pop();
        var e = egret.getDefinitionByName(this.className);
        return new e
    }
    ,
    e.prototype.returnObject = function(e) {
        this.list.push(e)
    }
    ,
    Object.defineProperty(e.prototype, "length", {
        get: function() {
            var e = 0;
            for (var t in this.list)
                e++;
            return e
        },
        enumerable: !0,
        configurable: !0
    }),
    e
}();
__reflect(Pool.prototype, "Pool");
var PanelManager = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.panelMap = {},
        t.clzMap = {},
        t.groupMap = {},
        t
    }
    return __extends(t, e),
    t.prototype.register = function(e, t, o) {
        void 0 === o && (o = null),
        this.clzMap[e] = t,
        this.groupMap[e] = o
    }
    ,
    t.prototype.open = function(e, t, o, n) {
        var s = this;
        void 0 === t && (t = null),
        void 0 === o && (o = null),
        void 0 === n && (n = null);
        var i = this.panelMap[e];
        if (i)
            i = this.openPanel(e, o, n, t);
        else {
            var r = this.clzMap[e];
            if (r) {
                i = new r,
                this.panelMap[e] = i;
                var a = this.groupMap[e];
                null != a ? App.ResUtils.loadGroup(a, function() {
                    s.openPanel(e, o, n, t)
                }, this) : this.openPanel(e, o, n, t)
            }
        }
        return i
    }
    ,
    t.prototype.openPanel = function(e, t, o, n) {
        void 0 === t && (t = null),
        void 0 === o && (o = null),
        void 0 === n && (n = null);
        var s = this.panelMap[e];
        return s && (s.parent ? (App.LayerManager.panelLayer.addChild(s),
        s.onEnable(n),
        t && o && t.apply(o)) : (s.once(egret.Event.ADDED_TO_STAGE, function() {
            s.onEnable(n),
            t && o && t.apply(o)
        }, this),
        App.LayerManager.panelLayer.addChild(s))),
        s
    }
    ,
    t.prototype.getPanel = function(e) {
        return this.panelMap[e]
    }
    ,
    t.prototype.close = function(e) {
        var t = this.panelMap[e];
        t && (t.once(egret.Event.REMOVED_FROM_STAGE, function() {
            t.onRemove()
        }, this),
        t.parent && t.parent.removeChild(t))
    }
    ,
    t.prototype.closeAll = function() {
        for (var e in this.panelMap)
            this.close(e)
    }
    ,
    t
}(SingleClass);
__reflect(PanelManager.prototype, "PanelManager");
var QRCode = function() {
    function e() {}
    return e.prototype.createHtmlCode = function(e) {
        if (null == this.htmlCode) {
            var t = document.getElementById("gameDiv");
            this.htmlCode = document.createElement("img"),
            this.htmlCode.src = e,
            this.htmlCode.style.position = "absolute",
            this.htmlCode.style.display = "none",
            t.appendChild(this.htmlCode)
        }
    }
    ,
    e.prototype.showHtmlCode = function(e, t) {
        this.htmlCode && (this.setSize(t.width, t.height),
        this.setPosition(t.x, t.y),
        this.htmlCode.style.display = "none")
    }
    ,
    e.prototype.hideHtmlCode = function() {
        this.htmlCode && (this.htmlCode.style.display = "none")
    }
    ,
    e.prototype.setPosition = function(e, t) {
        if (this.htmlCode) {
            var o = document.body.clientWidth / App.StageUtils.stageWidth
              , n = document.body.clientHeight / App.StageUtils.stageHeight;
            this.htmlCode.style.left = e * o + "px",
            this.htmlCode.style.top = t * n + "px"
        }
    }
    ,
    e.prototype.setSize = function(e, t) {
        if (this.htmlCode) {
            var o = document.body.clientWidth / App.StageUtils.stageWidth
              , n = document.body.clientHeight / App.StageUtils.stageHeight;
            this.htmlCode.style.left = e * o + "px",
            this.htmlCode.style.top = t * n + "px"
        }
    }
    ,
    e.prototype.destroy = function() {
        this.htmlCode && (this.htmlCode.parentNode.removeChild(this.htmlCode),
        this.htmlCode = null)
    }
    ,
    e
}();
__reflect(QRCode.prototype, "QRCode");
var ResUtils = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.groupMap = {},
        t.configs = new Array,
        RES.addEventListener(RES.ResourceEvent.GROUP_COMPLETE, t.onResourceLoadComplete, t),
        RES.addEventListener(RES.ResourceEvent.GROUP_PROGRESS, t.onResourceLoadProgress, t),
        RES.addEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, t.onResourceLoadError, t),
        t
    }
    return __extends(t, e),
    t.prototype.addConfig = function(e, t) {
        this.configs.push([e, t])
    }
    ,
    t.prototype.loadConfig = function(e, t) {
        this.onConfigComplete = e,
        this.onConfigCompleteTarget = t,
        this.loadNextConfig()
    }
    ,
    t.prototype.loadNextConfig = function() {
        if (0 == this.configs.length)
            return this.onConfigComplete.call(this.onConfigCompleteTarget),
            this.onConfigComplete = null,
            void (this.onConfigCompleteTarget = null);
        var e = this.configs.shift();
        RES.addEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigCompleteHandle, this),
        RES.loadConfig(e[0], e[1])
    }
    ,
    t.prototype.onConfigCompleteHandle = function(e) {
        RES.removeEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigCompleteHandle, this),
        this.loadNextConfig()
    }
    ,
    t.prototype.loadGroupQuiet = function(e) {
        RES.loadGroup(e)
    }
    ,
    t.prototype.loadGroup = function(e, t, o) {
        this.groupMap[e] = [t, null, o],
        RES.loadGroup(e)
    }
    ,
    t.prototype.loadGroups = function(e, t, o, n, s) {
        this.groupMap[e] = [o, n, s],
        RES.createGroup(e, t, !1),
        RES.loadGroup(e)
    }
    ,
    t.prototype.loadGroupWithPro = function(e, t, o, n) {
        this.groupMap[e] = [t, o, n],
        RES.loadGroup(e)
    }
    ,
    t.prototype.onResourceLoadComplete = function(e) {
        var t = e.groupName;
        if (console.log("资源组加载完成:" + t),
        this.groupMap[t]) {
            var o = this.groupMap[t][0]
              , n = this.groupMap[t][2];
            null != o && o.call(n),
            this.groupMap[t] = null,
            delete this.groupMap[t]
        }
    }
    ,
    t.prototype.onResourceLoadProgress = function(e) {
        var t = e.groupName;
        if (this.groupMap[t]) {
            var o = this.groupMap[t][1]
              , n = this.groupMap[t][2];
            null != o && o.call(n, e)
        }
    }
    ,
    t.prototype.onResourceLoadError = function(e) {
        console.log(e.groupName + "资源组有资源加载失败"),
        this.onResourceLoadComplete(e)
    }
    ,
    t.prototype.clearAllCallBack = function() {
        for (var e in this.groupMap)
            this.groupMap[e] = null,
            delete this.groupMap[e]
    }
    ,
    t
}(SingleClass);
__reflect(ResUtils.prototype, "ResUtils");
var SceneManager = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.sceneMap = {},
        t.clzMap = {},
        t
    }
    return __extends(t, e),
    t.prototype.register = function(e, t) {
        this.clzMap[e] = t
    }
    ,
    t.prototype.addScene = function(e, t) {
        this.sceneMap[e] = t
    }
    ,
    t.prototype.open = function(e, t) {
        void 0 === t && (t = null);
        var o = this.sceneMap[e];
        if (o)
            return this.replaceScene(o, t);
        var n = this.clzMap[e];
        return n ? (o = new n,
        this.sceneMap[e] = o,
        this.replaceScene(o, t)) : void 0
    }
    ,
    t.prototype.replaceScene = function(e, t) {
        void 0 === t && (t = null);
        var o = this.curScene;
        return o && (o.once(egret.Event.REMOVED_FROM_STAGE, function() {
            o.onRemove()
        }, this),
        App.LayerManager.sceneLayer.removeChild(o)),
        e.once(egret.Event.ADDED_TO_STAGE, function() {
            e.onEnable(t)
        }, this),
        App.LayerManager.sceneLayer.addChild(e),
        this.curScene = e,
        e
    }
    ,
    t.prototype.getScene = function(e) {
        return this.sceneMap[e]
    }
    ,
    t.prototype.getCurScene = function() {
        return this.curScene
    }
    ,
    t
}(SingleClass);
__reflect(SceneManager.prototype, "SceneManager");
var SoundManager = function(e) {
    function t() {
        var t = e.apply(this, arguments) || this;
        return t._allowEffect = !0,
        t._allowBGM = !0,
        t.soundList = {},
        t
    }
    return __extends(t, e),
    t.prototype.addSound = function(e) {
        var t = RES.getRes(e);
        t ? this.soundList[e] = t : console.error("声音不存在:", e)
    }
    ,
    t.prototype.playEffect = function(e, t) {
        if (void 0 === t && (t = 1),
        0 != this.allowEffect) {
            var o = this.soundList[e];
            o ? (o.type = egret.Sound.EFFECT,
            o.play(0, t)) : (this.addSound(e),
            o = this.soundList[e],
            o && (o.type = egret.Sound.EFFECT,
            o.play(0, t)))
        }
    }
    ,
    t.prototype.playBGM = function(e) {
        if (0 != this.allowBGM) {
            var t = this.soundList[e];
            t && null == this.bgmChannel ? (t.type = egret.Sound.MUSIC,
            this.bgmChannel = t.play(0, Number.MAX_VALUE)) : (this.addSound(e),
            t = this.soundList[e],
            t && null == this.bgmChannel && (t.type = egret.Sound.MUSIC,
            this.bgmChannel = t.play(0, Number.MAX_VALUE)))
        }
    }
    ,
    t.prototype.stopBGM = function() {
        this.bgmChannel && (this.bgmChannel.stop(),
        this.bgmChannel = null)
    }
    ,
    t.prototype.pauseBGM = function() {
        this.bgmChannel && (this.bgmChannel.volume = 0)
    }
    ,
    t.prototype.resumeBGM = function() {
        this.bgmChannel && (this.bgmChannel.volume = 1)
    }
    ,
    Object.defineProperty(t.prototype, "allowEffect", {
        get: function() {
            return this._allowEffect
        },
        set: function(e) {
            this._allowEffect = e
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t.prototype, "allowBGM", {
        get: function() {
            return this._allowBGM
        },
        set: function(e) {
            this._allowBGM = e
        },
        enumerable: !0,
        configurable: !0
    }),
    t
}(SingleClass);
__reflect(SoundManager.prototype, "SoundManager");
var StageUtils = function(e) {
    function t() {
        return e.apply(this, arguments) || this
    }
    return __extends(t, e),
    t.prototype.init = function(e) {
        this.stage = e
    }
    ,
    Object.defineProperty(t.prototype, "stageWidth", {
        get: function() {
            return this.stage.stageWidth
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t.prototype, "stageHeight", {
        get: function() {
            return this.stage.stageHeight
        },
        enumerable: !0,
        configurable: !0
    }),
    t.prototype.changeStageMode = function() {
        var e = document.body.clientWidth
          , t = document.body.clientHeight;
        egret.log("clientWidth:", e, " clientHeight:", t),
        this.stage.addEventListener(egret.StageOrientationEvent.ORIENTATION_CHANGE, this.changeStageMode, this),
        App.DeviceUtils.isPC ? (this.stage.orientation = egret.OrientationMode.AUTO,
        this.stage.scaleMode = egret.StageScaleMode.SHOW_ALL) : e / t > 1.775 ? this.stage.scaleMode = egret.StageScaleMode.SHOW_ALL : this.stage.scaleMode = egret.StageScaleMode.FIXED_HEIGHT
    }
    ,
    t.prototype.changeBgColor = function(e) {
        document.body.style.backgroundColor = e
    }
    ,
    t.prototype.addFocusListener = function() {
        this.stage.addEventListener(egret.Event.ACTIVATE, function() {
            egret.log("active"),
            App.Sound.resumeBGM()
        }, this),
        this.stage.addEventListener(egret.Event.DEACTIVATE, function() {
            egret.log("deactive"),
            App.Sound.pauseBGM()
        }, this)
    }
    ,
    t
}(SingleClass);
__reflect(StageUtils.prototype, "StageUtils");
var StringTool = function(e) {
    function t() {
        return e.apply(this, arguments) || this
    }
    return __extends(t, e),
    t.prototype.getVerificationCode = function(e) {
        for (var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", o = t.length, n = "", s = 0; e > s; s++)
            n += t.charAt(App.NumberTool.getRandInt(0, o));
        return n
    }
    ,
    t.prototype.cutString = function(e, t) {
        return e.length > t && (e = e.substr(0, t),
        e += "..."),
        e
    }
    ,
    t.prototype.checkEmpty = function(e) {
        return 0 == e.length ? !0 : !1
    }
    ,
    t.prototype.checkMobile = function(e) {
        var t = {
            regEmail: /^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/,
            regName: /^[a-z0-9_-]{3,16}$/,
            regMobile: /^0?1[3|4|5|8][0-9]\d{8}$/,
            regTel: /^0[\d]{2,3}-[\d]{7,8}$/
        };
        return t.regMobile.test(e)
    }
    ,
    t
}(SingleClass);
__reflect(StringTool.prototype, "StringTool");
var VersionManager = function(e) {
    function t() {
        return e.apply(this, arguments) || this
    }
    return __extends(t, e),
    t.prototype.init = function() {
        var e = window.version;
        return null == e ? void console.warn("version not init") : (console.log("版本号:", e),
        void (RES.web.Html5VersionController.prototype.getVirtualUrl = function(t) {
            return t += -1 == t.indexOf("?") ? "?v=" + e : "&v=" + e
        }
        ))
    }
    ,
    t
}(SingleClass);
__reflect(VersionManager.prototype, "VersionManager");
var WxContent = function(e) {
    function t() {
        var t = e.apply(this, arguments) || this;
        return t.isConfig = !1,
        t.wxServer = "http://h5pf.xykjg.com/gamesServer/wx/getSignature",
        t.gameServer = "http://h5pf.xykjg.com/admin/gamectrl/userVerify",
        t.title = "洗衣大师行军棋",
        t.desc = "玩洗衣大师行军棋，学习科学洗衣。",
        t.link = "http://mallapi.bluemoon.com.cn/wechat/authorization?appId=wx2b5f8f135210796d&redirect_uri=http%3a%2f%2fh5.xykjg.com%2fxjq%2f&scope=snsapi_userinfo",
        t.imgUrl = "http://h5.xykjg.com/xjq/resource/assets/wx.jpg",
        t.userInfo = {
            gameId: 1,
            loginFlag: 1,
            city: "",
            country: "",
            headimgurl: "",
            nickname: "",
            openid: "",
            privilege: "",
            province: "",
            sex: ""
        },
        t.userInfoApp = {
            loginFlag: 2,
            mobile: "18000000000",
            gameId: 2
        },
        t
    }
    return __extends(t, e),
    t.prototype.isWx = function() {
        var e = navigator.userAgent.toLowerCase();
        return /micromessenger/.test(e) ? !0 : !1
    }
    ,
    t.prototype.configWx = function() {
        if (egret.log("WxContent >> 请求JSSDK,是否是微信端打开", this.isWx()),
        0 != this.isWx()) {
            var e = {
                url: window.location.href
            };
            App.Http.initServerUrl(this.wxServer),
            App.Http.send(e, this.toConfig, this)
        }
    }
    ,
    t.prototype.toConfig = function(e) {
        egret.log("WxContent >> 请求JSSDK返回", e);
        var t = new BodyConfig;
        t.debug = !1,
        t.appId = e.appId,
        t.timestamp = e.timestamp,
        t.nonceStr = e.nonceStr,
        t.signature = e.signature,
        t.jsApiList = ["onMenuShareTimeline", "onMenuShareAppMessage", "onMenuShareQQ", "onMenuShareWeibo"],
        wx && (wx.config(t),
        wx.ready(function() {
            App.WxContent.isConfig = !0,
            App.WxContent.setTile(App.WxContent.title)
        }))
    }
    ,
    t.prototype.setTile = function(e) {
        if (0 != this.isConfig) {
            var t = new BodyMenuShareTimeline;
            t.title = e,
            t.imgUrl = this.imgUrl,
            t.link = this.link,
            t.success = function() {
                App.BluemoonSDK.tracking(BluemoonSDK.SHARE_GAME)
            }
            ,
            wx.onMenuShareTimeline(t);
            var o = new BodyMenuShareAppMessage;
            o.title = e,
            o.imgUrl = this.imgUrl,
            o.link = this.link,
            o.desc = this.desc,
            o.success = function() {
                App.BluemoonSDK.tracking(BluemoonSDK.SHARE_GAME)
            }
            ,
            wx.onMenuShareAppMessage(o);
            var n = new BodyMenuShareQQ;
            n.title = e,
            n.imgUrl = this.imgUrl,
            n.link = this.link,
            n.desc = this.desc,
            n.success = function() {
                App.BluemoonSDK.tracking(BluemoonSDK.SHARE_GAME)
            }
            ,
            wx.onMenuShareQQ(n);
            var s = new BodyMenuShareWeibo;
            s.title = e,
            s.imgUrl = this.imgUrl,
            s.link = this.link,
            s.desc = this.desc,
            s.success = function() {
                App.BluemoonSDK.tracking(BluemoonSDK.SHARE_GAME)
            }
            ,
            wx.onMenuShareWeibo(s)
        }
    }
    ,
    t.prototype.saveUserInfo = function() {
        this.userInfo.city = egret.getOption("city"),
        this.userInfo.country = egret.getOption("country"),
        this.userInfo.headimgurl = window.unescape(egret.getOption("headimgurl")),
        this.userInfo.nickname = decodeURI(egret.getOption("nickname")),
        this.userInfo.openid = egret.getOption("openid"),
        this.userInfo.privilege = egret.getOption("privilege"),
        this.userInfo.province = egret.getOption("province"),
        this.userInfo.sex = egret.getOption("sex"),
        egret.log("WxContent saveUserInfo >> openid:", this.userInfo.openid, " headimgurl:", this.userInfo.headimgurl)
    }
    ,
    t.prototype.checkUserInfoEmpty = function() {
        return null == this.userInfo.openid || "" == this.userInfo.openid
    }
    ,
    t.prototype.sendUserInfoRequest = function() {
        App.Http.initServerUrl(this.gameServer),
        App.Http.send(this.userInfo, this.revUserInfo, this)
    }
    ,
    t.prototype.sendUserInfoAppRequest = function() {
        App.Http.initServerUrl(this.gameServer),
        App.Http.send(this.userInfoApp, this.revUserInfoApp, this)
    }
    ,
    t.prototype.revUserInfo = function(e) {
        egret.log("WxContent revUserInfo >> ", e)
    }
    ,
    t.prototype.revUserInfoApp = function(e) {
        egret.log("App revUserInfo >> ", e)
    }
    ,
    t
}(SingleClass);
__reflect(WxContent.prototype, "WxContent");
var ChangeSoundCommand = function(e) {
    function t() {
        return e.apply(this, arguments) || this
    }
    return __extends(t, e),
    t.prototype.execute = function(e) {
        var t = e.getBody()
          , o = t.selected
          , n = t.type;
        0 == n ? o ? (App.Sound.allowBGM = !1,
        App.Sound.stopBGM()) : (App.Sound.allowBGM = !0,
        App.Sound.playBGM(SoundConst.BGM)) : 1 == n && (o ? App.Sound.allowEffect = !1 : App.Sound.allowEffect = !0)
    }
    ,
    t
}(puremvc.SimpleCommand);
__reflect(ChangeSoundCommand.prototype, "ChangeSoundCommand");
var StartupCommand = function(e) {
    function t() {
        return e.apply(this, arguments) || this
    }
    return __extends(t, e),
    t.prototype.execute = function(e) {
        var t = App.getInstance();
        App.PanelManager.register(PanelConst.RESULT, GameResultPanel, AssetConst.Result),
        App.PanelManager.register(PanelConst.RULE, RulePanel, AssetConst.Rule),
        App.PanelManager.register(PanelConst.KNOWLEDGE, KnowledgePanel),
        App.PanelManager.register(PanelConst.OPTIOIN, OptionPanel),
        App.PanelManager.register(PanelConst.TEST, TestPanel),
        App.PanelManager.register(PanelConst.MESSAGE_BOX, MessageBox),
        App.PanelManager.register(PanelConst.SHARE, SharePanel, AssetConst.Share),
        App.PanelManager.register(PanelConst.SELECT_CHESS, SelectChessPanel),
        App.PanelManager.register(PanelConst.MENU, MenuPanel, AssetConst.Menu),
        App.SceneManager.register(SceneConst.HOME, HomeScene),
        App.SceneManager.register(SceneConst.GAME, GameScene),
        t.registerCommand(CmdConst.CHANGE_SOUND, ChangeSoundCommand),
        App.ResUtils.loadGroupQuiet(AssetConst.Sound),
        App.ResUtils.loadGroupQuiet(AssetConst.Rule),
        App.ResUtils.loadGroupQuiet(AssetConst.Result),
        App.WxContent.saveUserInfo(),
        1 == App.WxContent.checkUserInfoEmpty() ? (App.DeviceUtils.isAndroid || App.DeviceUtils.isIos) && App.WxContent.sendUserInfoAppRequest() : App.WxContent.sendUserInfoRequest(),
        App.WxContent.configWx(),
        App.SceneManager.open(SceneConst.HOME)
    }
    ,
    t
}(puremvc.SimpleCommand);
__reflect(StartupCommand.prototype, "StartupCommand");
var AssetConst = function() {
    function e() {}
    return e
}();
AssetConst.Preload = "preload",
AssetConst.Home = "home",
AssetConst.Game = "game",
AssetConst.Result = "result",
AssetConst.Rule = "rule",
AssetConst.Option = "option",
AssetConst.Knowledge = "knowledge",
AssetConst.Share = "share",
AssetConst.Bgm = "bgm",
AssetConst.Sound = "sound",
AssetConst.Menu = "menu",
__reflect(AssetConst.prototype, "AssetConst");
var CmdConst = function() {
    function e() {}
    return e
}();
CmdConst.STARTUP = "STARTUP",
CmdConst.CHANGE_SOUND = "CHANGE_SOUND",
__reflect(CmdConst.prototype, "CmdConst");
var EventConst = function() {
    function e() {}
    return e
}();
EventConst.START_GAME = "START_GAME",
EventConst.AGAIN_GAME = "AGAIN_GAME",
EventConst.PAUSE_GAME = "PAUSE_GAME",
EventConst.RESUME_GAME = "RESUME_GAME",
EventConst.RESTART_GAME = "RESTART_GAME",
EventConst.TEST_DICE = "TEST_DICE",
EventConst.COUNT_DOWN_COMPLETE = "COUNT_DOWN_COMPLETE",
EventConst.SELECT_CHESS = "SELECT_CHESS",
EventConst.OPEN_RULE = "OPEN_RULE",
EventConst.CLOSE_RULE = "CLOSE_RULE",
__reflect(EventConst.prototype, "EventConst");
var GameConst = function() {
    function e() {}
    return e
}();
GameConst.MAX_PLAYER_NUM = 4,
GameConst.MAX_CHESS_NUM = 4,
GameConst.BadOrGoodList = [[0, 0, 0, 0, -1, 12, -1, -1, 0, 2, 2, 0, 2, 0, 0, -1, 0, 0, 99], [0, 0, 0, 0, -1, 0, 12, -1, 2, 2, 0, 0, 2, 0, 0, -1, 0, 0, 99], [0, 2, -1, 0, 12, -1, -1, -1, 0, 2, -1, 0, -1, 0, 0, 2, -1, 0, 99], [0, 2, 0, 0, -1, -1, -1, 12, 0, 2, -1, 0, -1, 0, 0, 2, 0, 0, 99]],
GameConst.END_STEP = 99,
GameConst.FLY_STEP = 12,
GameConst.BACK_STEP = -99,
GameConst.NUM_6 = 6,
GameConst.Circle_Node_Num = 52,
GameConst.ChessTypeStr = ["神器", "至尊", "含氯漂白剂", "含氧漂白剂"],
GameConst.PathNodeStr = ["", "色渍", "彩色棉布", "", "1:50稀释浸泡", "原液预涂", "机洗用量70%", "1:1搭配衣领净", "常规机洗", "衣领渍", "干衣预涂法", "白色棉布", "油渍", "", "", "色渍浸泡法", "丝毛", "", ""],
GameConst.COUNT_DOWN_TIME = 20,
GameConst.HAVE_READ_RULE = !1,
GameConst.ChessTexture = [["game_chess_green0_png", "game_chess_green1_png", "game_chess_green2_png", "game_chess_green3_png"], ["game_chess_red0_png", "game_chess_red1_png", "game_chess_red2_png", "game_chess_red3_png"], ["game_chess_yellow0_png", "game_chess_yellow1_png", "game_chess_yellow2_png", "game_chess_yellow3_png"], ["game_chess_blue0_png", "game_chess_blue1_png", "game_chess_blue2_png", "game_chess_blue3_png"]],
GameConst.ChessBgTexture = ["game_chessBg2_png", "game_chessBg3_png", "game_chessBg0_png", "game_chessBg1_png"],
GameConst.HeadUITexture = ["head_green_png", "head_red_png", "head_yellow_png", "head_blue_png"],
GameConst.HeadTimeTexture = ["head_time0_png", "head_time1_png", "head_time2_png", "head_time3_png"],
__reflect(GameConst.prototype, "GameConst");
var RoleTypeEnum;
!function(e) {
    e[e.Role = 0] = "Role",
    e[e.Computer = 1] = "Computer",
    e[e.Close = 2] = "Close"
}(RoleTypeEnum || (RoleTypeEnum = {}));
var RoleColorEnum;
!function(e) {
    e[e.Green = 0] = "Green",
    e[e.Red = 1] = "Red",
    e[e.Yellow = 2] = "Yellow",
    e[e.Blue = 3] = "Blue"
}(RoleColorEnum || (RoleColorEnum = {}));
var ChessTypeEnum;
!function(e) {
    e[e.God = 0] = "God",
    e[e.King = 1] = "King",
    e[e.Cl = 2] = "Cl",
    e[e.O = 3] = "O"
}(ChessTypeEnum || (ChessTypeEnum = {}));
var PathNodeEnum;
!function(e) {
    e[e.Start = 0] = "Start",
    e[e.ColorPatch = 1] = "ColorPatch",
    e[e.ColorCotton = 2] = "ColorCotton",
    e[e.FlyEnd = 3] = "FlyEnd",
    e[e.FlyStart0 = 4] = "FlyStart0",
    e[e.FlyStart1 = 5] = "FlyStart1",
    e[e.FlyStart2 = 6] = "FlyStart2",
    e[e.FlyStart3 = 7] = "FlyStart3",
    e[e.NormalWash = 8] = "NormalWash",
    e[e.CollarPatch = 9] = "CollarPatch",
    e[e.Pre = 10] = "Pre",
    e[e.WhiteCotton = 11] = "WhiteCotton",
    e[e.Oil = 12] = "Oil",
    e[e.Enter = 13] = "Enter",
    e[e.normal = 14] = "normal",
    e[e.soak = 15] = "soak",
    e[e.Silk = 16] = "Silk",
    e[e.FlyMid = 17] = "FlyMid",
    e[e.End = 18] = "End"
}(PathNodeEnum || (PathNodeEnum = {}));
var ChessStatusEnum;
!function(e) {
    e[e.DeActive = 0] = "DeActive",
    e[e.Active = 1] = "Active",
    e[e.Finish = 2] = "Finish"
}(ChessStatusEnum || (ChessStatusEnum = {}));
var ComboEnum;
!function(e) {
    e[e.AB = 0] = "AB",
    e[e.ABC = 1] = "ABC",
    e[e.ABD = 2] = "ABD",
    e[e.CD = 3] = "CD"
}(ComboEnum || (ComboEnum = {}));
var GameStatusEnum;
!function(e) {
    e[e.Null = 0] = "Null",
    e[e.WaitOption = 1] = "WaitOption",
    e[e.StartGame = 2] = "StartGame",
    e[e.Action = 3] = "Action",
    e[e.NextAction = 4] = "NextAction",
    e[e.RollDice = 5] = "RollDice",
    e[e.SelectAction = 6] = "SelectAction",
    e[e.AutoAction = 7] = "AutoAction",
    e[e.CheckGameOver = 8] = "CheckGameOver",
    e[e.CheckActionDice6 = 9] = "CheckActionDice6",
    e[e.GameOver = 10] = "GameOver"
}(GameStatusEnum || (GameStatusEnum = {}));
var PanelConst = function() {
    function e() {}
    return e
}();
PanelConst.RESULT = "Result",
PanelConst.RULE = "Rule",
PanelConst.KNOWLEDGE = "Knowledge",
PanelConst.OPTIOIN = "OPTION",
PanelConst.TEST = "TEST",
PanelConst.MESSAGE_BOX = "MESSAGE_BOX",
PanelConst.SHARE = "SHARE",
PanelConst.SELECT_CHESS = "SELECT_CHESS",
PanelConst.MENU = "MENU",
__reflect(PanelConst.prototype, "PanelConst");
var SceneConst = function() {
    function e() {}
    return e
}();
SceneConst.HOME = "HOME",
SceneConst.GAME = "GAME",
__reflect(SceneConst.prototype, "SceneConst");
var App = function(e) {
    function t() {
        return e.apply(this, arguments) || this
    }
    return __extends(t, e),
    t.sendNotification = function(e, o) {
        void 0 === o && (o = null),
        t.getInstance().sendNotification(e, o)
    }
    ,
    Object.defineProperty(t, "VersionManager", {
        get: function() {
            return VersionManager.getInstance()
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t, "DataCenter", {
        get: function() {
            return DataCenter.getInstance()
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t, "ArrayTool", {
        get: function() {
            return ArrayTool.getInstance()
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t, "NumberTool", {
        get: function() {
            return NumberTool.getInstance()
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t, "StringTool", {
        get: function() {
            return StringTool.getInstance()
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t, "ObjectPool", {
        get: function() {
            return ObjectPool.getInstance()
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t, "Http", {
        get: function() {
            return Http.getInstance()
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t, "Socket", {
        get: function() {
            return ClientSocket.getInstance()
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t, "ResUtils", {
        get: function() {
            return ResUtils.getInstance()
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t, "StageUtils", {
        get: function() {
            return StageUtils.getInstance()
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t, "PanelManager", {
        get: function() {
            return PanelManager.getInstance()
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t, "SceneManager", {
        get: function() {
            return SceneManager.getInstance()
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t, "LayerManager", {
        get: function() {
            return LayerManager.getInstance()
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t, "Sound", {
        get: function() {
            return SoundManager.getInstance()
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t, "DeviceUtils", {
        get: function() {
            return DeviceUtils.getInstance()
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t, "BluemoonSDK", {
        get: function() {
            return BluemoonSDK.getInstance()
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t, "WxContent", {
        get: function() {
            return WxContent.getInstance()
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t, "EventManager", {
        get: function() {
            return EventManager.getInstance()
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t, "EffectManager", {
        get: function() {
            return EffectManager.getInstance()
        },
        enumerable: !0,
        configurable: !0
    }),
    Object.defineProperty(t, "MsgBoxManager", {
        get: function() {
            return MsgBoxManager.getInstance()
        },
        enumerable: !0,
        configurable: !0
    }),
    t
}(puremvc.Facade);
__reflect(App.prototype, "App");
var SoundConst = function() {
    function e() {}
    return e
}();
SoundConst.BGM = "bgm_mp3",
SoundConst.DICE = "dice_mp3",
SoundConst.CHESS_FINISH = "chessFinish_mp3",
SoundConst.FLY = "fly_mp3",
SoundConst.KICK = "kick_mp3",
SoundConst.LOSE = "lose_mp3",
SoundConst.WIN = "win_mp3",
__reflect(SoundConst.prototype, "SoundConst");
var DataCenter = function(e) {
    function t() {
        return e.apply(this, arguments) || this
    }
    return __extends(t, e),
    t
}(SingleClass);
__reflect(DataCenter.prototype, "DataCenter");
var ClientSocket = function(e) {
    function t() {
        var t = e.apply(this, arguments) || this;
        return t.reconnenctMax = 3,
        t.curReconnectCount = 0,
        t.allowReconnect = !1,
        t
    }
    return __extends(t, e),
    t.prototype.connect = function(e, t) {
        void 0 === t && (t = !1),
        this.resetReconnect(),
        this.allowReconnect = t,
        this.createSocket(),
        this.socket.connectByUrl(e)
    }
    ,
    t.prototype.createSocket = function() {
        null == this.socket && (this.socket = new egret.WebSocket,
        this.socket.type = egret.WebSocket.TYPE_BINARY,
        this.socket.addEventListener(egret.Event.CONNECT, this.onConnect, this),
        this.socket.addEventListener(egret.ProgressEvent.SOCKET_DATA, this.onReceive, this),
        this.socket.addEventListener(egret.IOErrorEvent.IO_ERROR, this.onError, this),
        this.socket.addEventListener(egret.Event.CLOSE, this.onClose, this))
    }
    ,
    t.prototype.onConnect = function(e) {
        this.resetReconnect(),
        App.sendNotification(SocketConst.SOCKET_CONNECT)
    }
    ,
    t.prototype.send = function(e, t) {
        var o = JSON.stringify(t)
          , n = new egret.ByteArray;
        n.writeUTF(e),
        n.writeInt(o.length),
        n.writeUTFBytes(o),
        this.socket.writeBytes(n),
        this.socket.flush()
    }
    ,
    t.prototype.onReceive = function(e) {
        var t = new egret.ByteArray;
        this.socket.readBytes(t);
        var o = t.readUTF()
          , n = t.readInt()
          , s = JSON.parse(t.readUTFBytes(n));
        App.sendNotification(o, s)
    }
    ,
    t.prototype.onError = function(e) {
        0 == this.checkReconnenct() && App.sendNotification(SocketConst.SOCKET_ERROR)
    }
    ,
    t.prototype.onClose = function() {
        this.checkReconnenct() ? (this.curReconnectCount++,
        this.socket.connectByUrl(this.serverUrl),
        App.sendNotification(SocketConst.SOCKET_RECONNECT, this.curReconnectCount)) : (this.resetReconnect(),
        App.sendNotification(SocketConst.SOCKET_CLOSE))
    }
    ,
    t.prototype.checkReconnenct = function() {
        return this.allowReconnect && this.curReconnectCount < this.reconnenctMax
    }
    ,
    t.prototype.resetReconnect = function() {
        this.curReconnectCount = 0
    }
    ,
    t
}(SingleClass);
__reflect(ClientSocket.prototype, "ClientSocket");
var Http = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.httpMethod = egret.HttpMethod.POST,
        t.cacheList = [],
        t.requesting = !1,
        t.request = new egret.HttpRequest,
        t.request.responseType = egret.HttpResponseType.TEXT,
        t.request.addEventListener(egret.Event.COMPLETE, t.onSendComplete, t),
        t.request.addEventListener(egret.IOErrorEvent.IO_ERROR, t.onSendIOError, t),
        t
    }
    return __extends(t, e),
    t.prototype.initServerUrl = function(e) {
        this.serverUrl = e
    }
    ,
    t.prototype.send = function(e, t, o) {
        this.cacheList.push([JSON.stringify(e), t, o]),
        this.next()
    }
    ,
    t.prototype.next = function() {
        this.requesting || 0 != this.cacheList.length && (this.curSend = this.cacheList.shift(),
        this.request.open(this.serverUrl, this.httpMethod),
        this.request.setRequestHeader("Content-type", "application/json"),
        this.httpMethod == egret.HttpMethod.POST ? this.request.send(this.curSend[0]) : this.request.send(),
        this.requesting = !0)
    }
    ,
    t.prototype.onSendComplete = function(e) {
        this.curSend && this.curSend[1].call(this.curSend[2], JSON.parse(this.request.response)),
        this.requesting = !1,
        this.next()
    }
    ,
    t.prototype.onSendIOError = function(e) {
        console.error("Http send error"),
        this.requesting = !1,
        this.next()
    }
    ,
    t.prototype.clearAllRequest = function() {
        this.request.abort(),
        this.curSend = null,
        this.cacheList.length = 0
    }
    ,
    t
}(SingleClass);
__reflect(Http.prototype, "Http");
var HeadUIControl = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.roleHeadList = ["head_woman0_png", "head_woman1_png", "head_man0_png"],
        t.aiHeadList = ["head_ai0_png"],
        t.init(),
        t
    }
    return __extends(t, e),
    t.prototype.init = function() {
        this.headGroup = this.gameScene.headGroup,
        this.headList = [],
        this.oriHeadList = [];
        for (var e = 0; 4 > e; e++) {
            var t = this.headGroup.getChildAt(e);
            t.id = e,
            this.headList.push(t),
            this.oriHeadList.push(t)
        }
    }
    ,
    t.prototype.setHeadUI = function() {
        for (var e = App.DataCenter.roleTypeList, t = e.length, o = 0; t > o; o++) {
            var n = e[o]
              , s = this.headList[o];
            n == RoleTypeEnum.Role ? App.WxContent.checkUserInfoEmpty() ? (s.setHeadImg(this.roleHeadList[App.NumberTool.getRandInt(0, 2)]),
            s.setName("玩家" + (o + 1))) : (s.setWxHeadImg(App.WxContent.userInfo.headimgurl),
            s.setName(App.WxContent.userInfo.nickname)) : n == RoleTypeEnum.Computer && (s.setName("电脑"),
            s.setHeadImg(this.aiHeadList[0]))
        }
    }
    ,
    t.prototype.resetHeadUI = function() {
        for (var e = this.headList.length, t = 0; e > t; t++) {
            var o = this.headList[t];
            o.reset()
        }
    }
    ,
    t.prototype.startCountDown = function(e) {
        this.stopCountDown(),
        this.resetCountDown(),
        this.curHeadUI = this.headList[e],
        this.curHeadUI.startCountDown(),
        this.curHeadUI.addEventListener(egret.TimerEvent.TIMER_COMPLETE, this.onCountDownComplete, this)
    }
    ,
    t.prototype.stopCountDown = function() {
        this.curHeadUI && this.curHeadUI.removeEventListener(egret.TimerEvent.TIMER_COMPLETE, this.onCountDownComplete, this)
    }
    ,
    t.prototype.resetCountDown = function() {
        for (var e = this.headList.length, t = 0; e > t; t++) {
            var o = this.headList[t];
            o.resetCountDown()
        }
    }
    ,
    t.prototype.onCountDownComplete = function() {
        this.curHeadUI && (this.curHeadUI.stopCountDown(),
        this.curHeadUI.removeEventListener(egret.TimerEvent.TIMER_COMPLETE, this.onCountDownComplete, this)),
        App.EventManager.dispatchEventWith(EventConst.COUNT_DOWN_COMPLETE)
    }
    ,
    t.prototype.pauseCountDown = function() {
        this.curHeadUI && this.curHeadUI.pauseCountDown()
    }
    ,
    t.prototype.resumeCountDown = function() {
        this.curHeadUI && this.curHeadUI.resumeCountDown()
    }
    ,
    t
}(BaseControl);
__reflect(HeadUIControl.prototype, "HeadUIControl");
var KnowledgeControl = function(e) {
    function t() {
        return e.call(this) || this
    }
    return __extends(t, e),
    t.prototype.showPathKnowledge = function(e, t, o, n, s, i) {
        var r = App.DataCenter.roleTypeList;
        if (r[e] == RoleTypeEnum.Role && 0 == this.gameScene.bAutoAction) {
            var a = App.PanelManager.open(PanelConst.KNOWLEDGE);
            console.log("站点冲突:", t, o),
            a.show(t, o, n, s, i),
            this.sortPanel()
        } else
            s.apply(i)
    }
    ,
    t.prototype.showComboKonwledge = function(e, t, o, n, s) {
        void 0 === s && (s = !1);
        var i = App.DataCenter.roleTypeList;
        if (i[e] == RoleTypeEnum.Role && 0 == this.gameScene.bAutoAction) {
            var r = App.PanelManager.open(PanelConst.KNOWLEDGE);
            r.showCombo(t, s, o, n),
            this.sortPanel()
        } else
            o.apply(n)
    }
    ,
    t.prototype.showBlock = function(e, t, o) {
        var n = App.DataCenter.roleTypeList;
        if (n[e] == RoleTypeEnum.Role && 0 == this.gameScene.bAutoAction) {
            var s = App.PanelManager.open(PanelConst.KNOWLEDGE);
            s.showBlock(t, o),
            this.sortPanel()
        } else
            t.apply(o)
    }
    ,
    t.prototype.showFlyHit = function(e, t, o) {
        var n = App.DataCenter.roleTypeList;
        if (n[e] == RoleTypeEnum.Role && 0 == this.gameScene.bAutoAction) {
            var s = App.PanelManager.open(PanelConst.KNOWLEDGE);
            s.showFlyHit(t, o),
            this.sortPanel()
        } else
            t.apply(o)
    }
    ,
    t.prototype.sortPanel = function() {
        var e = App.PanelManager.getPanel(PanelConst.RULE);
        e && e.parent && App.LayerManager.panelLayer.setChildIndex(e, 2)
    }
    ,
    t
}(BaseControl);
__reflect(KnowledgeControl.prototype, "KnowledgeControl");
var PathControl = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.moveStepTime = 200,
        t.flyTime = 1e3,
        t.init(),
        t
    }
    return __extends(t, e),
    t.prototype.init = function() {
        this.pathNodeGroup = this.gameScene.pathNodeGroup,
        this.pathNodeList = [];
        for (var e, t = 79; t >= 0; t--)
            e = this.pathNodeGroup.getChildAt(t),
            e.index = t,
            this.pathNodeList[t] = e,
            e.parent.removeChild(e);
        for (t = 0; 4 > t; t++) {
            var o = this.pathNodeList[13 * t];
            o.type = PathNodeEnum.Start
        }
        for (this.pathNodeList[10].type = PathNodeEnum.End,
        this.pathNodeList[23].type = PathNodeEnum.End,
        this.pathNodeList[36].type = PathNodeEnum.End,
        this.pathNodeList[49].type = PathNodeEnum.End,
        t = 0; 4 > t; t++) {
            var n = 13 * t;
            this.pathNodeList[n + 1].type = PathNodeEnum.ColorPatch,
            this.pathNodeList[n + 2].type = PathNodeEnum.ColorCotton,
            this.pathNodeList[n + 3].type = PathNodeEnum.FlyEnd,
            0 == t ? this.pathNodeList[n + 4].type = PathNodeEnum.FlyStart0 : 1 == t ? this.pathNodeList[n + 4].type = PathNodeEnum.FlyStart1 : 2 == t ? this.pathNodeList[n + 4].type = PathNodeEnum.FlyStart2 : 3 == t && (this.pathNodeList[n + 4].type = PathNodeEnum.FlyStart3),
            this.pathNodeList[n + 5].type = PathNodeEnum.NormalWash,
            this.pathNodeList[n + 6].type = PathNodeEnum.CollarPatch,
            this.pathNodeList[n + 7].type = PathNodeEnum.Pre,
            this.pathNodeList[n + 8].type = PathNodeEnum.WhiteCotton,
            this.pathNodeList[n + 9].type = PathNodeEnum.Oil,
            this.pathNodeList[n + 10].type = PathNodeEnum.Enter,
            this.pathNodeList[n + 11].type = PathNodeEnum.soak,
            this.pathNodeList[n + 12].type = PathNodeEnum.Silk
        }
        for (t = 0; 4 > t; t++) {
            var n = 51 + 6 * t;
            this.pathNodeList[n + 1].type = PathNodeEnum.normal,
            this.pathNodeList[n + 2].type = PathNodeEnum.normal,
            this.pathNodeList[n + 3].type = PathNodeEnum.FlyMid,
            this.pathNodeList[n + 4].type = PathNodeEnum.normal,
            this.pathNodeList[n + 5].type = PathNodeEnum.normal,
            this.pathNodeList[n + 6].type = PathNodeEnum.End
        }
        this.flyPathNodeList = [],
        this.flyPathNodeList[0] = [this.pathNodeList[4], this.pathNodeList[60], this.pathNodeList[16]],
        this.flyPathNodeList[1] = [this.pathNodeList[17], this.pathNodeList[66], this.pathNodeList[29]],
        this.flyPathNodeList[2] = [this.pathNodeList[30], this.pathNodeList[72], this.pathNodeList[42]],
        this.flyPathNodeList[3] = [this.pathNodeList[43], this.pathNodeList[54], this.pathNodeList[3]],
        this.oriFlyPathNodeList = [],
        this.oriFlyPathNodeList[0] = [this.pathNodeList[4], this.pathNodeList[60], this.pathNodeList[16]],
        this.oriFlyPathNodeList[1] = [this.pathNodeList[17], this.pathNodeList[66], this.pathNodeList[29]],
        this.oriFlyPathNodeList[2] = [this.pathNodeList[30], this.pathNodeList[72], this.pathNodeList[42]],
        this.oriFlyPathNodeList[3] = [this.pathNodeList[43], this.pathNodeList[54], this.pathNodeList[3]],
        this.rolePathNodeList = [],
        this.oriRolePathNodeList = [];
        var s = this.pathNodeList.slice(0, 50)
          , i = this.pathNodeList.slice(52, 58);
        this.rolePathNodeList[0] = s.concat(i),
        this.rolePathNodeList[0].unshift(this.pathNodeList[76]);
        var r = this.pathNodeList.slice(13, 52).concat(this.pathNodeList.slice(0, 11))
          , a = this.pathNodeList.slice(58, 64);
        this.rolePathNodeList[1] = r.concat(a),
        this.rolePathNodeList[1].unshift(this.pathNodeList[77]);
        var h = this.pathNodeList.slice(26, 52).concat(this.pathNodeList.slice(0, 24))
          , l = this.pathNodeList.slice(64, 70);
        this.rolePathNodeList[2] = h.concat(l),
        this.rolePathNodeList[2].unshift(this.pathNodeList[78]);
        var c = this.pathNodeList.slice(39, 52).concat(this.pathNodeList.slice(0, 37))
          , p = this.pathNodeList.slice(70, 76);
        this.rolePathNodeList[3] = c.concat(p),
        this.rolePathNodeList[3].unshift(this.pathNodeList[79]);
        var u = this.rolePathNodeList.length
          , g = this.rolePathNodeList[0].length;
        for (t = 0; u > t; t++) {
            this.oriRolePathNodeList[t] = [];
            for (var m = 0; g > m; m++)
                this.oriRolePathNodeList[t][m] = this.rolePathNodeList[t][m]
        }
    }
    ,
    t.prototype.checkGoodOrBad = function(e, t) {
        var o, n = e.roleColor, s = (e.chessType,
        this.rolePathNodeList[n]), i = e.curIndex, r = s.length - 1, a = i + t, h = 0, l = !1;
        if (a == r)
            h = GameConst.END_STEP;
        else if (r > a) {
            var c = [];
            c = this.getMovePathNodeList([e], i, t, c),
            0 == c.length ? (h = 0,
            l = !0) : (o = c[c.length - 1],
            h = GameConst.BadOrGoodList[e.chessType][o.type],
            a > s.indexOf(o) && (l = !0))
        } else
            a > r && (h = GameConst.BACK_STEP);
        return [h, o, l]
    }
    ,
    t.prototype.getMovePathNodeList = function(e, t, o, n) {
        var s = e[0].roleColor
          , i = this.rolePathNodeList[s]
          , r = i.length - 1
          , a = t + o
          , h = !1;
        if (o >= 0)
            var l = i.slice(t + 1, a + 1);
        else if (0 > o) {
            0 > a && (a = 0);
            var l = i.slice(a, t);
            l.reverse()
        } else if (0 == o)
            return n;
        var c = l.length;
        if (o >= 0) {
            for (var p = 0; c > p; p++)
                if (this.checkBlockOne(e, l[p])) {
                    var u = t + 1 + p;
                    console.log("检查前进阻挡，阻挡位置:", u);
                    var g = u - 2;
                    if (g >= 0 && this.checkBlockOne(e, i[g]))
                        h = !0;
                    else
                        var m = this.getBlockPath(e[0], t, u, o);
                    break
                }
        } else if (0 > o)
            for (var p = c - 1; p >= 0; p--)
                if (this.checkBlockOne(e, l[p])) {
                    var g = a + (c - 1 - p);
                    console.log("检查后退阻挡，阻挡位置:", g);
                    var u = g + 2;
                    if (r >= u && this.checkBlockOne(e, i[u]))
                        h = !0;
                    else
                        var d = this.getBlockPath(e[0], t, g, o);
                    break
                }
        return h ? console.log("前后阻挡，被包夹") : o >= 0 && m ? (n = n.concat(m[0]),
        n = this.getMovePathNodeList(e, m[1], m[2], n)) : 0 > o && d ? (n = n.concat(d[0]),
        n = this.getMovePathNodeList(e, d[1], d[2], n)) : n = n.concat(l),
        n
    }
    ,
    t.prototype.checkBlockOne = function(e, t) {
        for (var o = e[0].roleColor, n = e.length, s = t.chessList.length, i = 0; s > i; i++)
            if (i != o) {
                for (var r = t.chessList[i], a = 0, h = 0; h < r.length; h++)
                    r[h] && a++;
                if (a > n)
                    return !0
            }
        return !1
    }
    ,
    t.prototype.getBlockPath = function(e, t, o, n) {
        var s, i, r, a = this.rolePathNodeList[e.roleColor];
        n >= 0 ? (s = a.slice(t + 1, o),
        i = o - 1,
        r = -(n - (o - t - 1))) : (s = a.slice(o + 1, t),
        s.reverse(),
        i = o + 1,
        r = -(n + (t - o - 1))),
        console.log("获取阻挡路径,目的地位置:", i, " 剩余步数:", r, " 路径点索引:");
        for (var h = 0; h < s.length; h++)
            console.log(s[h].index);
        return [s, i, r]
    }
    ,
    t.prototype.moveOutAirport = function(e, t) {
        var o = this
          , n = e.roleColor
          , s = this.rolePathNodeList[n]
          , i = s[0];
        e.curIndex = 0,
        this.gameScene.chessControl.stopChessJump(n),
        egret.Tween.get(e).to({
            x: i.x,
            y: i.y
        }, this.getMoveTime(2)).call(function() {
            o.setChessAndNodeStatus([e], -1, 0, ChessStatusEnum.Active),
            o.gameScene.chessControl.sortChess(),
            t && t.apply(o)
        }, this),
        console.log("移动出飞机场:", this.gameScene.getTestColor(), " ", this.gameScene.getTestChessType(e))
    }
    ,
    t.prototype.getMoveTime = function(e) {
        return 3 > e ? this.moveStepTime * e : this.moveStepTime * e / 2
    }
    ,
    t.prototype.setChessAndNodeStatus = function(e, t, o, n) {
        console.log("设置棋子状态", this.gameScene.getTestColor());
        for (var s = e.length, i = 0; s > i; i++) {
            var r = e[i]
              , a = this.rolePathNodeList[r.roleColor];
            if (-1 != t) {
                var h = a[t];
                h.chessList[r.roleColor][r.chessType] = null,
                h.totalChessNum--,
                console.log("当前路径:", t, h.totalChessNum)
            }
            if (n == ChessStatusEnum.Active) {
                var l = a[o];
                l.chessList[r.roleColor][r.chessType] = r,
                r.curIndex = o,
                l.totalChessNum++,
                r.pathNode = l,
                console.log("终点路径:", o, l.totalChessNum)
            }
            r.status = n
        }
    }
    ,
    t.prototype.moveInAirport = function(e, t) {
        for (var o = this, n = this.gameScene.chessControl.chessPosList, s = e.length, i = 0; s > i; i++) {
            var r = e[i]
              , a = r.roleColor
              , h = r.chessType
              , l = n[a][h]
              , c = 5 * egret.Point.distance(new egret.Point(r.x,r.y), new egret.Point(l.x,l.y))
              , p = 0;
            r.status == ChessStatusEnum.Finish && (p = 1500),
            this.moveChessFinish(r, p, c, l.x, l.y)
        }
        r.status == ChessStatusEnum.Finish ? (App.EffectManager.showChessFinishEffect(e[0]),
        c += 1510) : c += 10,
        egret.Tween.get(this).wait(c).call(function() {
            o.gameScene.chessControl.sortChess(),
            t && t.apply(o)
        }, this)
    }
    ,
    t.prototype.moveChessFinish = function(e, t, o, n, s) {
        egret.Tween.get(e).wait(t).to({
            x: n,
            y: s
        }, o).call(function() {
            e.status == ChessStatusEnum.Finish && e.setFinish()
        }, this),
        console.log("移回飞机场:", this.gameScene.getTestColor(), " ", this.gameScene.getTestChessType(e))
    }
    ,
    t.prototype.moveChess = function(e, t, o) {
        var n = this;
        void 0 === o && (o = !0);
        var s = e[0].roleColor
          , i = this.rolePathNodeList[s]
          , r = e[0].curIndex
          , a = i.length - 1
          , h = r + t
          , l = !1;
        if (this.gameScene.chessControl.stopChessJump(s),
        h == a)
            console.log("到达终点 ", this.gameScene.getTestColor()),
            this.moveByPathAndInAirport(e, t, function() {
                n.gameScene.changeState(GameStatusEnum.CheckGameOver)
            });
        else if (a > h) {
            var c = [];
            if (c = this.getMovePathNodeList(e, r, t, c),
            0 == c.length)
                return console.log("不可移动状态"),
                this.gameScene.chessControl.sortChess(),
                void this.gameScene.knowledgeControl.showBlock(s, function() {
                    n.gameScene.changeState(GameStatusEnum.CheckActionDice6)
                }, this);
            var p = c[c.length - 1];
            h > i.indexOf(p) && (l = !0),
            h = i.indexOf(p),
            console.log("开始移动,是否第一次前行:", o, "是否阻挡:", l, " 颜色:", this.gameScene.getTestColor(), " 起点:", r, " 目的地:", h, " 步数:", t);
            var u = function() {
                n.setChessAndNodeStatus(e, r, h, ChessStatusEnum.Active),
                n.gameScene.chessControl.showOneHeTi(i[r], r),
                n.moveChessByPath(e, c, function() {
                    o && 0 == l ? n.checkPathEffect(e, p) || n.checkPathFly(e, p) ? console.log("PathControl >> 有站点冲突") : n.checkABCorABD(e, p) || n.checkAB(e, p) || n.checkCD(e, p) ? console.log("PathControl >> 有组合冲突") : (console.log("PathControl >> 无冲突，下一玩家行动"),
                    n.gameScene.changeState(GameStatusEnum.CheckActionDice6)) : (console.log("pathControl >> 无需检查冲突，下一玩家行动"),
                    n.gameScene.changeState(GameStatusEnum.CheckActionDice6))
                })
            };
            l ? this.gameScene.knowledgeControl.showBlock(s, u, this) : u.apply(this)
        } else if (h > a) {
            console.log("到达终点后回退");
            var g = this.getBlockPath(e[0], r, a + 1, t)
              , m = g[0]
              , h = g[1]
              , d = g[2];
            this.setChessAndNodeStatus(e, r, h, ChessStatusEnum.Active),
            this.gameScene.chessControl.showOneHeTi(i[r], r),
            this.moveChessByPath(e, m, function() {
                n.moveChess(e, d, o)
            })
        }
    }
    ,
    t.prototype.moveByPathAndInAirport = function(e, t, o) {
        var n = this
          , s = e[0].roleColor
          , i = this.rolePathNodeList[s]
          , r = e[0].curIndex
          , a = i.length - 1
          , h = i.slice(r + 1, a + 1);
        this.setChessAndNodeStatus(e, r, a, ChessStatusEnum.Finish),
        this.gameScene.chessControl.showOneHeTi(i[r], r),
        this.moveChessByPath(e, h, function() {
            n.moveInAirport(e, o)
        })
    }
    ,
    t.prototype.moveChessByPath = function(e, t, o) {
        for (var n = this, s = t.length, i = e.length, r = 0; i > r; r++) {
            var a = e[r];
            this.moveTween(a, t, 0, s)
        }
        egret.Tween.get(this).wait(s * this.moveStepTime).call(function() {
            n.gameScene.chessControl.sortChess(),
            o.apply(n)
        }, this)
    }
    ,
    t.prototype.moveTween = function(e, t, o, n) {
        var s = this;
        n > o && egret.Tween.get(e).to({
            x: t[o].x,
            y: t[o].y
        }, this.moveStepTime).call(function() {
            o++,
            s.moveTween(e, t, o, n)
        }, this)
    }
    ,
    t.prototype.checkPathEffect = function(e, t) {
        var o = this
          , n = e[0]
          , s = GameConst.BadOrGoodList[n.chessType][t.type];
        if (console.log("检查站点冲突, 增益步数:", s),
        0 != s && s != GameConst.FLY_STEP) {
            var i = function() {
                o.moveChess([n], s, !1)
            };
            return this.gameScene.knowledgeControl.showPathKnowledge(n.roleColor, n.chessType, t.type, s, i, this),
            !0
        }
        return !1
    }
    ,
    t.prototype.checkPathFly = function(e, t) {
        var o = this
          , n = e[0].roleColor
          , s = this.rolePathNodeList[n]
          , i = e[0].curIndex
          , r = []
          , a = e[0]
          , h = GameConst.BadOrGoodList[a.chessType][t.type];
        if (console.log("检查穿越虚线, 增益步数:", h),
        h == GameConst.FLY_STEP) {
            for (var l = this.getFlyPathNodeList(t), c = l[1], p = c.chessList, u = l[2], g = u.chessList, m = 0; m < p.length; m++) {
                var d = p[m]
                  , C = this.getArrayChessNum(d)
                  , f = g[m]
                  , E = this.getArrayChessNum(f)
                  , y = e.length
                  , v = 1 == C || C > 1 && y > C
                  , S = C > 1 && C >= y
                  , T = E > 1 && E >= y;
                if (m != a.roleColor && (S || T))
                    return console.log("飞越虚线，通道上其他颜色棋子较多，无法通过"),
                    this.gameScene.knowledgeControl.showBlock(n, function() {
                        o.gameScene.changeState(GameStatusEnum.CheckActionDice6)
                    }, this),
                    !0;
                if (m != a.roleColor && v) {
                    console.log("飞越虚线，打回通道上其他颜色棋子");
                    for (var _ = 0; _ < d.length; _++) {
                        var L = d[_];
                        L && r.push(L)
                    }
                }
            }
            var A = this.gameScene.chessControl.getChessListByStatus(n, ChessStatusEnum.Finish)
              , P = s.indexOf(l[1])
              , N = 3 == A.length && -1 != P
              , w = s.indexOf(l[2]) < 10;
            if (N || w) {
                console.log("飞越虚线，最有一颗棋子:", N, "飞过头:", w, "直接飞到虚线通道上");
                var R = function() {
                    App.Sound.playEffect(SoundConst.FLY);
                    for (var t = 0; t < e.length; t++) {
                        var n = e[t];
                        egret.Tween.get(n).to({
                            x: l[1].x,
                            y: l[1].y
                        }, o.flyTime / 2)
                    }
                    o.setChessAndNodeStatus(e, i, P, ChessStatusEnum.Active),
                    egret.Tween.get(o).wait(o.flyTime / 2).call(function() {
                        o.gameScene.changeState(GameStatusEnum.CheckActionDice6)
                    }, o)
                };
                this.gameScene.knowledgeControl.showPathKnowledge(n, a.chessType, t.type, h, R, this)
            } else {
                console.log("正常飞越虚线");
                var b = function() {
                    App.Sound.playEffect(SoundConst.FLY);
                    for (var t = 0; t < e.length; t++) {
                        var s = e[t];
                        egret.Tween.get(s).to({
                            x: l[1].x,
                            y: l[1].y
                        }, o.flyTime / 2)
                    }
                    egret.Tween.get(o).wait(o.flyTime / 2).call(function() {
                        r.length > 0 ? o.gameScene.knowledgeControl.showFlyHit(n, M, o) : M.apply(o)
                    }, o)
                }
                  , M = function() {
                    r.length > 0 && App.Sound.playEffect(SoundConst.KICK);
                    for (var t = s.indexOf(l[2]), n = 0; n < e.length; n++) {
                        var a = e[n];
                        egret.Tween.get(a).to({
                            x: l[2].x,
                            y: l[2].y
                        }, o.flyTime / 2)
                    }
                    o.setChessAndNodeStatus(e, i, t, ChessStatusEnum.Active);
                    for (var h = 0; h < r.length; h++)
                        o.hitFlyPathChess(r[h]);
                    egret.Tween.get(o).wait(o.flyTime / 2).call(function() {
                        o.gameScene.changeState(GameStatusEnum.CheckActionDice6)
                    }, o)
                };
                this.gameScene.knowledgeControl.showPathKnowledge(n, a.chessType, t.type, h, b, this)
            }
            return !0
        }
        return !1
    }
    ,
    t.prototype.getFlyPathNodeList = function(e) {
        for (var t = this.flyPathNodeList.length, o = 0; t > o; o++) {
            var n = this.flyPathNodeList[o];
            if (n[0] == e)
                return n
        }
        return null
    }
    ,
    t.prototype.checkAB = function(e, t) {
        var o = this
          , n = t.chessList[e[0].roleColor]
          , s = [];
        if (n[0] && n[1] && null == n[2] && null == n[3] && (s = [n[0], n[1]]),
        console.log("检查AB:", s.length > 0),
        s.length > 0) {
            for (var i = [], r = !1, a = t.chessList, h = 0; h < a.length; h++) {
                var l = a[h];
                if (e[0].roleColor != h && 1 == this.getArrayChessNum(l))
                    for (var c = 0; c < l.length; c++) {
                        var p = l[c];
                        p && (r = !0,
                        i.push(p))
                    }
            }
            if (r) {
                var u = function() {
                    App.Sound.playEffect(SoundConst.KICK),
                    o.setChessAndNodeStatus(i, i[0].curIndex, -1, ChessStatusEnum.DeActive),
                    o.moveInAirport(i, null),
                    o.gameScene.changeState(GameStatusEnum.CheckActionDice6)
                };
                this.gameScene.knowledgeControl.showComboKonwledge(e[0].roleColor, ComboEnum.AB, u, this, r)
            } else {
                var u = function() {
                    o.moveChess(e, o.gameScene.curDiceNum, !1)
                };
                this.gameScene.knowledgeControl.showComboKonwledge(e[0].roleColor, ComboEnum.AB, u, this)
            }
            return !0
        }
        return !1
    }
    ,
    t.prototype.checkABCorABD = function(e, t) {
        var o = this
          , n = t.chessList[e[0].roleColor]
          , s = []
          , i = n[0] && n[1] && n[2] && null == n[3]
          , r = n[0] && n[1] && null == n[2] && n[3];
        if (i ? s = [n[0], n[1], n[2]] : r && (s = [n[0], n[1], n[3]]),
        console.log("检查ABCorABD:", s.length > 0),
        s.length > 0) {
            var a = i ? ComboEnum.ABC : ComboEnum.ABD
              , h = function() {
                o.moveChess(s, o.gameScene.curDiceNum, !1)
            };
            return this.gameScene.knowledgeControl.showComboKonwledge(e[0].roleColor, a, h, this),
            !0
        }
        return !1
    }
    ,
    t.prototype.checkCD = function(e, t) {
        var o = this
          , n = t.chessList[e[0].roleColor];
        if (console.log("检查CD:", n[2] && n[3]),
        n[2] && n[3]) {
            var s = function() {
                o.moveChess(e, -1, !1)
            };
            return this.gameScene.knowledgeControl.showComboKonwledge(e[0].roleColor, ComboEnum.CD, s, this),
            !0
        }
        return !1
    }
    ,
    t.prototype.getArrayChessNum = function(e) {
        for (var t = e.length, o = 0, n = 0; t > n; n++)
            e[n] && o++;
        return o
    }
    ,
    t.prototype.hitFlyPathChess = function(e) {
        var t = this;
        egret.Tween.get(e).wait(this.flyTime / 2).call(function() {
            t.setChessAndNodeStatus([e], e.curIndex, -1, ChessStatusEnum.DeActive),
            t.moveInAirport([e], null)
        }, this)
    }
    ,
    t.prototype.resetAllPathNode = function() {
        for (var e = this.pathNodeList.length, t = 0; e > t; t++)
            this.pathNodeList[t].reset()
    }
    ,
    t
}(BaseControl);
__reflect(PathControl.prototype, "PathControl");
var PathTipControl = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.init(),
        t
    }
    return __extends(t, e),
    t.prototype.init = function() {
        this.tipGreenGroup = this.gameScene.tipGreenGroup,
        this.tipRedGroup = this.gameScene.tipRedGroup,
        this.selectChessGroup = this.gameScene.selectChessGroup,
        this.tipGreenList = [],
        this.tipRedList = [];
        for (var e = GameConst.Circle_Node_Num, t = 0; e > t; t++)
            this.tipGreenList.push(this.tipGreenGroup.getChildAt(t)),
            this.tipRedList.push(this.tipRedGroup.getChildAt(t));
        this.hideTip()
    }
    ,
    t.prototype.hideTip = function() {
        console.log("PathTipControl >> 隐藏路径提示");
        for (var e = this.tipGreenGroup.numChildren, t = 0; e > t; t++) {
            var o = this.tipGreenGroup.getChildAt(t);
            egret.Tween.removeTweens(o),
            o.alpha = 1
        }
        e = this.tipRedGroup.numChildren;
        for (var t = 0; e > t; t++) {
            var n = this.tipRedGroup.getChildAt(t);
            egret.Tween.removeTweens(n),
            n.alpha = 1
        }
        this.tipGreenGroup.removeChildren(),
        this.tipRedGroup.removeChildren(),
        e = this.selectChessGroup.numChildren;
        for (var t = 1; e > t; t++)
            this.selectChessGroup.removeChildAt(t);
        this.selectChessGroup.visible = !1
    }
    ,
    t.prototype.showPathNodeTip = function(e, t, o) {
        void 0 === o && (o = -1),
        console.log("PathTipControl >> 显示路径提示");
        for (var n = this.gameScene.chessControl.chessList, s = this.gameScene.pathControl.rolePathNodeList, i = n[e], r = s[e], a = (r.length - 1,
        []), h = 0; h < i.length; h++) {
            var l = i[h];
            if (-1 == o)
                this.selectChessGroup.visible = !1;
            else {
                if (l.chessType != o)
                    continue;
                this.selectChessGroup.visible = !0
            }
            if (l.status == ChessStatusEnum.Active) {
                var c = this.gameScene.pathControl.checkGoodOrBad(l, t)
                  , p = c[0]
                  , u = c[1]
                  , g = c[2]
                  , m = 0;
                if (u && (m = u.index),
                g)
                    ;
                else if (p > 0 && p != GameConst.END_STEP) {
                    console.log("显示提示");
                    var d = this.tipGreenList[m];
                    -1 == o ? this.tipGreenGroup.addChild(d) : this.selectChessGroup.addChild(d),
                    egret.Tween.get(d, {
                        loop: !0
                    }).to({
                        alpha: .1
                    }, 1e3).to({
                        alpha: 1
                    }, 1e3)
                } else if (0 > p && p != GameConst.BACK_STEP) {
                    var C = this.tipRedList[m];
                    -1 == o ? this.tipRedGroup.addChild(C) : this.selectChessGroup.addChild(C),
                    egret.Tween.get(C, {
                        loop: !0
                    }).to({
                        alpha: .1
                    }, 1e3).to({
                        alpha: 1
                    }, 1e3)
                }
                console.log("显示路径点增益:", p, "路径点索引:", m)
            } else
                a[h] = null
        }
    }
    ,
    t
}(BaseControl);
__reflect(PathTipControl.prototype, "PathTipControl");
var ViewUIControl = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.bTest0 = !1,
        t.bTest1 = !1,
        t.init(),
        t
    }
    return __extends(t, e),
    t.prototype.init = function() {
        this.ruleBtn = this.gameScene.ruleBtn,
        this.menuBtn = this.gameScene.menuBtn,
        this.dice = this.gameScene.dice,
        this.diceClick = this.gameScene.diceClick,
        this.testBtn0 = this.gameScene.testBtn0,
        this.testBtn1 = this.gameScene.testBtn1,
        this.chessBg = this.gameScene.chessBg,
        this.testBtn0.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTestBtn, this),
        this.testBtn1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTestBtn, this),
        this.menuBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onMenuBtnTouch, this),
        this.ruleBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onRuleBtnTouch, this)
    }
    ,
    t.prototype.onTestBtn = function(e) {
        var t = this;
        e.target == this.testBtn0 ? this.bTest0 = !0 : e.target == this.testBtn1 && (this.bTest1 = !0),
        this.bTest0 && this.bTest1 && App.PanelManager.open(PanelConst.TEST),
        egret.Tween.get(this).wait(1e3).call(function() {
            t.bTest0 = !1,
            t.bTest1 = !1
        }, this)
    }
    ,
    t.prototype.onRuleBtnTouch = function() {
        App.PanelManager.open(PanelConst.RULE)
    }
    ,
    t.prototype.onMenuBtnTouch = function() {
        App.PanelManager.open(PanelConst.MENU)
    }
    ,
    t.prototype.resetDice = function() {
        this.dice.reset()
    }
    ,
    t.prototype.addDiceTouch = function() {
        this.diceClick.show(),
        this.diceClick.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onDiceTouch, this)
    }
    ,
    t.prototype.removeDiceTouch = function() {
        this.diceClick.hide(),
        this.diceClick.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onDiceTouch, this)
    }
    ,
    t.prototype.onDiceTouch = function() {
        console.log("ViewUIControl >> 点击骰子"),
        this.gameScene.bPause || this.gameScene.changeState(GameStatusEnum.RollDice)
    }
    ,
    t.prototype.playDiceAnim = function(e) {
        App.Sound.playEffect(SoundConst.DICE),
        this.dice.play(e),
        this.dice.addEventListener(egret.Event.COMPLETE, this.playDiceComplete, this)
    }
    ,
    t.prototype.playDice = function(e) {
        void 0 === e && (e = -1),
        this.diceClick.hide(),
        this.playDiceComplete(),
        this.dice.gotoAndStop(e)
    }
    ,
    t.prototype.playDiceComplete = function() {
        var e = this.gameScene.curRoleColor;
        this.dice.removeEventListener(egret.Event.COMPLETE, this.playDiceComplete, this);
        var t = App.DataCenter.roleTypeList[e];
        switch (t) {
        case RoleTypeEnum.Role:
            this.gameScene.changeState(GameStatusEnum.SelectAction);
            break;
        case RoleTypeEnum.Computer:
            this.gameScene.changeState(GameStatusEnum.AutoAction);
            break;
        case RoleTypeEnum.Close:
        }
    }
    ,
    t.prototype.changeChessBg = function(e) {
        this.chessBg.texture = RES.getRes(GameConst.ChessBgTexture[e])
    }
    ,
    t
}(BaseControl);
__reflect(ViewUIControl.prototype, "ViewUIControl");
var ChessFinishEffect = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.skinName = "ChessFinishEffectSkin",
        t.percentWidth = 100,
        t.percentHeight = 100,
        t
    }
    return __extends(t, e),
    t.prototype.childrenCreated = function() {}
    ,
    t.prototype.playAnim = function(e) {
        var t = this;
        this.starGroup.scaleX = 0,
        this.starGroup.scaleY = 0,
        this.chessImg.texture = e.texture,
        this.light.rotation = 0,
        this.star0.visible = !0,
        this.star1.visible = !1,
        App.LayerManager.effectLayer.addChild(this),
        egret.Tween.get(this.light).to({
            rotation: 360
        }, 2e3),
        egret.Tween.get(this.starGroup).to({
            scaleX: 2,
            scaleY: 2
        }, 2e3, egret.Ease.bounceOut),
        egret.Tween.get(this, {
            loop: !0
        }).wait(100).call(function() {
            t.star0.visible = !1,
            t.star1.visible = !0
        }, this).wait(100).call(function() {
            t.star0.visible = !0,
            t.star1.visible = !1
        }, this),
        egret.Tween.get(this).wait(2e3).call(function() {
            t.hide()
        }, this)
    }
    ,
    t.prototype.hide = function() {
        egret.Tween.removeTweens(this),
        this.parent && this.parent.removeChild(this)
    }
    ,
    t
}(eui.Component);
__reflect(ChessFinishEffect.prototype, "ChessFinishEffect");
var GameResultPanel = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.resultLabelList = [],
        t.skinName = "GameResultPanelSkin",
        t
    }
    return __extends(t, e),
    t.prototype.childrenCreated = function() {
        this.resultLabelList.push(this.resultLabel0, this.resultLabel1, this.resultLabel2)
    }
    ,
    t.prototype.onEnable = function(e) {
        for (var t = !1, o = e, n = ["绿方", "红方", "黄方", "蓝方"], s = 0, i = 0; i < GameConst.MAX_PLAYER_NUM; i++) {
            var r = i
              , a = o[i];
            if (4 == a) {
                this.winLabel.text = n[r] + "胜利!";
                var h = App.DataCenter.roleTypeList[r];
                h == RoleTypeEnum.Role && (t = !0)
            } else
                this.resultLabelList[s].text = n[r] + "：" + a + "/4",
                s++
        }
        t ? (App.Sound.playEffect(SoundConst.WIN),
        this.reset(),
        this.playWinAnim()) : (App.Sound.playEffect(SoundConst.LOSE),
        this.reset(),
        this.playLoseAnim()),
        this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTap, this)
    }
    ,
    t.prototype.onRemove = function() {
        this.reset()
    }
    ,
    t.prototype.onTouchTap = function(e) {
        switch (e.target) {
        case this.againBtn:
            App.PanelManager.close(PanelConst.RESULT),
            App.EventManager.dispatchEventWith(EventConst.AGAIN_GAME);
            break;
        case this.shareBtn:
            App.PanelManager.open(PanelConst.SHARE)
        }
    }
    ,
    t.prototype.playWinAnim = function() {
        var e = this;
        this.winImg.scaleX = this.winImg.scaleY = 0,
        egret.Tween.get(this.winImg).to({
            scaleX: 1,
            scaleY: 1
        }, 500).call(function() {
            e.lightImg.visible = !0,
            e.lightImg.rotation = 0,
            egret.Tween.get(e.lightImg, {
                loop: !0
            }).to({
                rotation: 360
            }, 3e3)
        }, this)
    }
    ,
    t.prototype.playLoseAnim = function() {
        var e = this;
        this.loseImg.scaleX = this.loseImg.scaleY = 0,
        egret.Tween.get(this.loseImg).to({
            scaleX: 1,
            scaleY: 1
        }, 500).call(function() {
            e.lightImg.visible = !0,
            e.lightImg.rotation = 0,
            egret.Tween.get(e.lightImg, {
                loop: !0
            }).to({
                rotation: 360
            }, 3e3)
        }, this)
    }
    ,
    t.prototype.reset = function() {
        this.winImg.scaleX = this.winImg.scaleY = 0,
        this.loseImg.scaleX = this.loseImg.scaleY = 0,
        this.lightImg.visible = !1,
        egret.Tween.removeTweens(this.lightImg),
        egret.Tween.removeTweens(this.winImg),
        egret.Tween.removeTweens(this.loseImg)
    }
    ,
    t
}(BasePanel);
__reflect(GameResultPanel.prototype, "GameResultPanel");
var KnowledgePanel = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.skinName = "KnowledgePanelSkin",
        t.initTipText(),
        t
    }
    return __extends(t, e),
    t.prototype.childrenCreated = function() {
        this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onOkTouch, this)
    }
    ,
    t.prototype.onOkTouch = function(e) {
        this.hide(),
        this.callBack && this.thisObject && this.callBack.apply(this.thisObject)
    }
    ,
    t.prototype.show = function(e, t, o, n, s) {
        this.knowledgeImg.texture = RES.getRes(this.tipImgList[e][t]),
        this.callBack = n,
        this.thisObject = s
    }
    ,
    t.prototype.showCombo = function(e, t, o, n) {
        switch (e) {
        case ComboEnum.AB:
            t ? this.knowledgeImg.texture = RES.getRes("knowledge_9_png") : this.knowledgeImg.texture = RES.getRes("knowledge_8_png");
            break;
        case ComboEnum.ABC:
            this.knowledgeImg.texture = RES.getRes("knowledge_10_png");
            break;
        case ComboEnum.ABD:
            this.knowledgeImg.texture = RES.getRes("knowledge_11_png");
            break;
        case ComboEnum.CD:
            this.knowledgeImg.texture = RES.getRes("knowledge_16_png")
        }
        this.callBack = o,
        this.thisObject = n
    }
    ,
    t.prototype.showBlock = function(e, t) {
        this.knowledgeImg.texture = RES.getRes("knowledge_18_png"),
        this.callBack = e,
        this.thisObject = t
    }
    ,
    t.prototype.showFlyHit = function(e, t) {
        this.knowledgeImg.texture = RES.getRes("knowledge_19_png"),
        this.callBack = e,
        this.thisObject = t
    }
    ,
    t.prototype.hide = function() {
        this.parent && this.parent.removeChild(this)
    }
    ,
    t.prototype.initTipText = function() {
        this.tipImgList = [],
        this.tipImgList[ChessTypeEnum.God] = [],
        this.tipImgList[ChessTypeEnum.God][PathNodeEnum.ColorPatch] = [""],
        this.tipImgList[ChessTypeEnum.God][PathNodeEnum.ColorCotton] = [""],
        this.tipImgList[ChessTypeEnum.God][PathNodeEnum.FlyStart0] = ["knowledge_4_png"],
        this.tipImgList[ChessTypeEnum.God][PathNodeEnum.FlyStart1] = ["knowledge_12_png"],
        this.tipImgList[ChessTypeEnum.God][PathNodeEnum.FlyStart2] = ["knowledge_4_png"],
        this.tipImgList[ChessTypeEnum.God][PathNodeEnum.FlyStart3] = ["knowledge_4_png"],
        this.tipImgList[ChessTypeEnum.God][PathNodeEnum.NormalWash] = [""],
        this.tipImgList[ChessTypeEnum.God][PathNodeEnum.CollarPatch] = ["knowledge_0_png"],
        this.tipImgList[ChessTypeEnum.God][PathNodeEnum.Pre] = ["knowledge_0_png"],
        this.tipImgList[ChessTypeEnum.God][PathNodeEnum.WhiteCotton] = [""],
        this.tipImgList[ChessTypeEnum.God][PathNodeEnum.Oil] = ["knowledge_0_png"],
        this.tipImgList[ChessTypeEnum.God][PathNodeEnum.soak] = ["knowledge_4_png"],
        this.tipImgList[ChessTypeEnum.God][PathNodeEnum.Silk] = [""],
        this.tipImgList[ChessTypeEnum.King] = [],
        this.tipImgList[ChessTypeEnum.King][PathNodeEnum.ColorPatch] = [""],
        this.tipImgList[ChessTypeEnum.King][PathNodeEnum.ColorCotton] = [""],
        this.tipImgList[ChessTypeEnum.King][PathNodeEnum.FlyStart0] = ["knowledge_5_png"],
        this.tipImgList[ChessTypeEnum.King][PathNodeEnum.FlyStart1] = ["knowledge_5_png"],
        this.tipImgList[ChessTypeEnum.King][PathNodeEnum.FlyStart2] = ["knowledge_13_png"],
        this.tipImgList[ChessTypeEnum.King][PathNodeEnum.FlyStart3] = ["knowledge_5_png"],
        this.tipImgList[ChessTypeEnum.King][PathNodeEnum.NormalWash] = ["knowledge_2_png"],
        this.tipImgList[ChessTypeEnum.King][PathNodeEnum.CollarPatch] = ["knowledge_1_png"],
        this.tipImgList[ChessTypeEnum.King][PathNodeEnum.Pre] = ["knowledge_5_png"],
        this.tipImgList[ChessTypeEnum.King][PathNodeEnum.WhiteCotton] = [""],
        this.tipImgList[ChessTypeEnum.King][PathNodeEnum.Oil] = ["knowledge_1_png"],
        this.tipImgList[ChessTypeEnum.King][PathNodeEnum.soak] = ["knowledge_5_png"],
        this.tipImgList[ChessTypeEnum.King][PathNodeEnum.Silk] = [""],
        this.tipImgList[ChessTypeEnum.Cl] = [],
        this.tipImgList[ChessTypeEnum.Cl][PathNodeEnum.ColorPatch] = ["knowledge_17_png"],
        this.tipImgList[ChessTypeEnum.Cl][PathNodeEnum.ColorCotton] = ["knowledge_6_png"],
        this.tipImgList[ChessTypeEnum.Cl][PathNodeEnum.FlyStart0] = ["knowledge_14_png"],
        this.tipImgList[ChessTypeEnum.Cl][PathNodeEnum.FlyStart1] = ["knowledge_6_png"],
        this.tipImgList[ChessTypeEnum.Cl][PathNodeEnum.FlyStart2] = ["knowledge_6_png"],
        this.tipImgList[ChessTypeEnum.Cl][PathNodeEnum.FlyStart3] = ["knowledge_6_png"],
        this.tipImgList[ChessTypeEnum.Cl][PathNodeEnum.NormalWash] = [""],
        this.tipImgList[ChessTypeEnum.Cl][PathNodeEnum.CollarPatch] = ["knowledge_17_png"],
        this.tipImgList[ChessTypeEnum.Cl][PathNodeEnum.Pre] = ["knowledge_6_png"],
        this.tipImgList[ChessTypeEnum.Cl][PathNodeEnum.WhiteCotton] = [""],
        this.tipImgList[ChessTypeEnum.Cl][PathNodeEnum.Oil] = ["knowledge_6_png"],
        this.tipImgList[ChessTypeEnum.Cl][PathNodeEnum.soak] = ["knowledge_17_png"],
        this.tipImgList[ChessTypeEnum.Cl][PathNodeEnum.Silk] = ["knowledge_6_png"],
        this.tipImgList[ChessTypeEnum.O] = [],
        this.tipImgList[ChessTypeEnum.O][PathNodeEnum.ColorPatch] = ["knowledge_17_png"],
        this.tipImgList[ChessTypeEnum.O][PathNodeEnum.ColorCotton] = [""],
        this.tipImgList[ChessTypeEnum.O][PathNodeEnum.FlyStart0] = ["knowledge_7_png"],
        this.tipImgList[ChessTypeEnum.O][PathNodeEnum.FlyStart1] = ["knowledge_7_png"],
        this.tipImgList[ChessTypeEnum.O][PathNodeEnum.FlyStart2] = ["knowledge_7_png"],
        this.tipImgList[ChessTypeEnum.O][PathNodeEnum.FlyStart3] = ["knowledge_15_png"],
        this.tipImgList[ChessTypeEnum.O][PathNodeEnum.NormalWash] = [""],
        this.tipImgList[ChessTypeEnum.O][PathNodeEnum.CollarPatch] = ["knowledge_17_png"],
        this.tipImgList[ChessTypeEnum.O][PathNodeEnum.Pre] = ["knowledge_7_png"],
        this.tipImgList[ChessTypeEnum.O][PathNodeEnum.WhiteCotton] = [""],
        this.tipImgList[ChessTypeEnum.O][PathNodeEnum.Oil] = ["knowledge_7_png"],
        this.tipImgList[ChessTypeEnum.O][PathNodeEnum.soak] = ["knowledge_17_png"],
        this.tipImgList[ChessTypeEnum.O][PathNodeEnum.Silk] = [""]
    }
    ,
    t
}(BasePanel);
__reflect(KnowledgePanel.prototype, "KnowledgePanel");
var MenuPanel = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.skinName = "MenuPanelSkin",
        t
    }
    return __extends(t, e),
    t.prototype.childrenCreated = function() {
        this.msgLabel.text = ""
    }
    ,
    t.prototype.onEnable = function(e) {
        void 0 === e && (e = null),
        App.Sound.allowBGM || App.Sound.allowEffect ? this.soundBtn.selected = !1 : this.soundBtn.selected = !0,
        this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTap, this)
    }
    ,
    t.prototype.onRemove = function() {}
    ,
    t.prototype.onTouchTap = function(e) {
        switch (e.target) {
        case this.closeBtn:
            App.PanelManager.close(PanelConst.MENU);
            break;
        case this.soundBtn:
            this.onSoundBtnTouch();
            break;
        case this.restartBtn:
            App.EventManager.dispatchEventWith(EventConst.RESTART_GAME);
            break;
        case this.pauseBtn:
            this.onPauseBtnTouch()
        }
    }
    ,
    t.prototype.onSoundBtnTouch = function() {
        App.Sound.allowBGM = !this.soundBtn.selected,
        App.Sound.allowEffect = !this.soundBtn.selected,
        App.sendNotification(CmdConst.CHANGE_SOUND, {
            selected: this.soundBtn.selected,
            type: 0
        }),
        App.sendNotification(CmdConst.CHANGE_SOUND, {
            selected: this.soundBtn.selected,
            type: 1
        })
    }
    ,
    t.prototype.onPauseBtnTouch = function() {
        0 == this.pauseBtn.selected ? (this.msgLabel.text = "",
        App.EventManager.dispatchEventWith(EventConst.RESUME_GAME)) : (this.msgLabel.text = "暂停游戏",
        App.EventManager.dispatchEventWith(EventConst.PAUSE_GAME))
    }
    ,
    t
}(BasePanel);
__reflect(MenuPanel.prototype, "MenuPanel");
var OptionPanel = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.skinName = "OptionPanelSkin",
        t
    }
    return __extends(t, e),
    t.prototype.onEnable = function() {
        this.selectGreenBtn.setRoleType(RoleTypeEnum.Role),
        this.selectRedBtn.setRoleType(RoleTypeEnum.Role),
        this.selectBlueBtn.setRoleType(RoleTypeEnum.Role),
        this.selectYellowBtn.setRoleType(RoleTypeEnum.Role),
        this.bgmBtn.selected = !App.Sound.allowBGM,
        this.effectBtn.selected = !App.Sound.allowEffect,
        this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTap, this)
    }
    ,
    t.prototype.onRemove = function() {
        this.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTap, this)
    }
    ,
    t.prototype.onTouchTap = function(e) {
        switch (e.target) {
        case this.bgmBtn:
            App.sendNotification(CmdConst.CHANGE_SOUND, {
                selected: this.bgmBtn.selected,
                type: 0
            });
            break;
        case this.effectBtn:
            App.sendNotification(CmdConst.CHANGE_SOUND, {
                selected: this.effectBtn.selected,
                type: 1
            });
            break;
        case this.saveBtn:
            if (this.checkEmptyRole())
                return App.PanelManager.close(PanelConst.OPTIOIN),
                void App.MsgBoxManager.showMsg("必须选择一个角色", function() {
                    App.PanelManager.open(PanelConst.OPTIOIN)
                }, this);
            this.saveData(),
            App.PanelManager.close(PanelConst.OPTIOIN),
            App.EventManager.dispatchEventWith(EventConst.START_GAME)
        }
    }
    ,
    t.prototype.saveData = function() {
        App.DataCenter.roleTypeList = [this.selectGreenBtn.roleType, this.selectRedBtn.roleType, this.selectYellowBtn.roleType, this.selectBlueBtn.roleType]
    }
    ,
    t.prototype.checkEmptyRole = function() {
        return this.selectGreenBtn.roleType == RoleTypeEnum.Close && this.selectRedBtn.roleType == RoleTypeEnum.Close && this.selectYellowBtn.roleType == RoleTypeEnum.Close && this.selectBlueBtn.roleType == RoleTypeEnum.Close ? !0 : !1
    }
    ,
    t
}(BasePanel);
__reflect(OptionPanel.prototype, "OptionPanel");
var RulePanel = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.skinName = "RulePanelSkin",
        t
    }
    return __extends(t, e),
    t.prototype.childrenCreated = function() {}
    ,
    t.prototype.onEnable = function() {
        App.EventManager.dispatchEvent(new egret.Event(EventConst.OPEN_RULE)),
        this.backBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onBackTouch, this)
    }
    ,
    t.prototype.onRemove = function() {
        App.EventManager.dispatchEvent(new egret.Event(EventConst.CLOSE_RULE)),
        this.backBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onBackTouch, this)
    }
    ,
    t.prototype.onBackTouch = function() {
        App.PanelManager.close(PanelConst.RULE)
    }
    ,
    t
}(BasePanel);
__reflect(RulePanel.prototype, "RulePanel");
var SelectChessPanel = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.chessList = [],
        t.radioList = [],
        t.skinName = "SelectChessPanelSkin",
        t
    }
    return __extends(t, e),
    t.prototype.childrenCreated = function() {
        for (var e = 0; 4 > e; e++)
            this.chessList.push(this.uiGroup.getChildAt(e)),
            this.radioList.push(this.uiGroup.getChildAt(4 + e))
    }
    ,
    t.prototype.onEnable = function(e) {
        void 0 === e && (e = null),
        this.show(e)
    }
    ,
    t.prototype.onRemove = function() {}
    ,
    t.prototype.show = function(e) {
        for (var t = 0; 4 > t; t++)
            this.chessList[t].visible = !1,
            this.radioList[t].visible = !1;
        for (var o = e.length, n = 0, t = 0; o > t; t++) {
            var s = e[t];
            if (s) {
                var i = this.chessList[n];
                i.texture = RES.getRes(GameConst.ChessTexture[s.roleColor][s.chessType]),
                i.roleColor = s.roleColor,
                i.chessType = s.chessType,
                i.visible = !0,
                this.radioList[n].visible = !0,
                n++
            }
        }
        this.radioBtn.selected = !0;
        var r = App.SceneManager.getScene(SceneConst.GAME);
        r.pathTipControl.hideTip(),
        r.pathTipControl.showPathNodeTip(r.curRoleColor, r.curDiceNum, this.chessList[0].chessType),
        this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTap, this)
    }
    ,
    t.prototype.onTouchTap = function(e) {
        e.target;
        if (e.target instanceof Chess) {
            var t = e.target
              , o = this.chessList.indexOf(t);
            this.radioList[o].selected = !0;
            var n = App.SceneManager.getScene(SceneConst.GAME);
            n.pathTipControl.hideTip(),
            n.pathTipControl.showPathNodeTip(n.curRoleColor, n.curDiceNum, t.chessType)
        } else if (e.target == this.okBtn) {
            this.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTap, this),
            App.PanelManager.close(PanelConst.SELECT_CHESS);
            var n = App.SceneManager.getScene(SceneConst.GAME);
            n.pathTipControl.hideTip(),
            n.pathTipControl.showPathNodeTip(n.curRoleColor, n.curDiceNum);
            var s = this.chessList[this.radioBtn.group.selectedValue].chessType;
            App.EventManager.dispatchEventWith(EventConst.SELECT_CHESS, !1, s)
        } else if (e.target == this.cancelBtn) {
            this.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTap, this),
            App.PanelManager.close(PanelConst.SELECT_CHESS);
            var n = App.SceneManager.getScene(SceneConst.GAME);
            n.pathTipControl.hideTip(),
            n.pathTipControl.showPathNodeTip(n.curRoleColor, n.curDiceNum)
        }
    }
    ,
    t.prototype.hide = function() {
        App.PanelManager.close(PanelConst.SELECT_CHESS)
    }
    ,
    t
}(BasePanel);
__reflect(SelectChessPanel.prototype, "SelectChessPanel");
var SharePanel = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.skinName = "SharePanelSkin",
        t
    }
    return __extends(t, e),
    t.prototype.childrenCreated = function() {}
    ,
    t.prototype.onEnable = function() {
        this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTap, this)
    }
    ,
    t.prototype.onRemove = function() {
        this.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTap, this)
    }
    ,
    t.prototype.onTouchTap = function() {
        App.PanelManager.close(PanelConst.SHARE)
    }
    ,
    t
}(BasePanel);
__reflect(SharePanel.prototype, "SharePanel");
var TestPanel = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.diceList = [],
        t.skinName = "TestPanelSkin",
        t.touchEnabled = !1,
        t
    }
    return __extends(t, e),
    t.prototype.childrenCreated = function() {
        for (var e = 0; 6 > e; e++)
            this.diceList.push(this.diceGroup.getChildAt(e));
        this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTap, this)
    }
    ,
    t.prototype.onEnable = function() {}
    ,
    t.prototype.onRemove = function() {}
    ,
    t.prototype.onTouchTap = function(e) {
        if (e.target instanceof eui.Image) {
            var t = this.diceList.indexOf(e.target);
            -1 != t && App.EventManager.dispatchEventWith(EventConst.TEST_DICE, !1, t + 1)
        }
    }
    ,
    t
}(BasePanel);
__reflect(TestPanel.prototype, "TestPanel");
var GameScene = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.bAutoAction = !1,
        t.bPause = !1,
        t.skinName = "GameSceneSkin",
        t
    }
    return __extends(t, e),
    t.prototype.childrenCreated = function() {
        this.chessControl = new ChessControl,
        this.pathControl = new PathControl,
        this.pathTipControl = new PathTipControl,
        this.knowledgeControl = new KnowledgeControl,
        this.headUIControl = new HeadUIControl,
        this.viewUIControl = new ViewUIControl
    }
    ,
    t.prototype.onEnable = function(e) {
        var t = this;
        void 0 === e && (e = null),
        this.curStatus = GameStatusEnum.Null,
        App.EventManager.addEventListener(EventConst.TEST_DICE, this.onTestDice, this),
        App.EventManager.addEventListener(EventConst.START_GAME, function() {
            t.changeState(GameStatusEnum.StartGame)
        }, this),
        App.EventManager.addEventListener(EventConst.AGAIN_GAME, function() {
            t.changeState(GameStatusEnum.WaitOption)
        }, this),
        App.EventManager.addEventListener(EventConst.COUNT_DOWN_COMPLETE, this.countDownComplete, this),
        App.EventManager.addEventListener(EventConst.PAUSE_GAME, this.pauseGame, this),
        App.EventManager.addEventListener(EventConst.RESUME_GAME, this.resumeGame, this),
        App.EventManager.addEventListener(EventConst.RESTART_GAME, this.restartGame, this),
        App.EventManager.addEventListener(EventConst.SELECT_CHESS, this.onSelectChess, this),
        App.EventManager.addEventListener(EventConst.OPEN_RULE, this.onOpenRule, this),
        App.EventManager.addEventListener(EventConst.CLOSE_RULE, this.onCloseRule, this),
        App.Sound.playBGM(SoundConst.BGM),
        1 == GameConst.HAVE_READ_RULE ? this.changeState(GameStatusEnum.WaitOption) : App.PanelManager.open(PanelConst.RULE)
    }
    ,
    t.prototype.onRemove = function() {
        this.resetGame(),
        App.PanelManager.closeAll(),
        App.Sound.stopBGM()
    }
    ,
    t.prototype.onTestDice = function(e) {
        var t = e.data;
        this.curDiceNum = t,
        this.viewUIControl.playDice(t)
    }
    ,
    t.prototype.changeState = function(e) {
        switch (console.log("GameScene >> 改变状态:", e, " 当前状态:", this.curStatus),
        this.lastStatus = this.curStatus,
        this.curStatus = e,
        this.curStatus) {
        case GameStatusEnum.WaitOption:
            this.onWaitOption();
            break;
        case GameStatusEnum.StartGame:
            this.onStartGame();
            break;
        case GameStatusEnum.Action:
            this.onAction();
            break;
        case GameStatusEnum.NextAction:
            this.onNextAction();
            break;
        case GameStatusEnum.RollDice:
            this.onRollDice();
            break;
        case GameStatusEnum.SelectAction:
            this.bAutoAction ? this.onAutoAction() : this.onSelectAction();
            break;
        case GameStatusEnum.AutoAction:
            this.onAutoAction();
            break;
        case GameStatusEnum.CheckGameOver:
            this.onCheckGameOver();
            break;
        case GameStatusEnum.CheckActionDice6:
            this.onCheckActionDice6();
            break;
        case GameStatusEnum.GameOver:
            this.gameOver()
        }
    }
    ,
    t.prototype.onWaitOption = function() {
        this.resetGame(),
        App.PanelManager.closeAll(),
        App.PanelManager.open(PanelConst.OPTIOIN)
    }
    ,
    t.prototype.onStartGame = function() {
        this.resetCurRoleColor(),
        this.chessControl.rotateChessPos(),
        this.headUIControl.setHeadUI(),
        this.chessControl.resetChess(),
        this.chessControl.setChess(),
        this.changeState(GameStatusEnum.Action),
        this.startGameTime = new Date,
        console.log("GameScene >> 游戏开始" + this.startGameTime)
    }
    ,
    t.prototype.resetGame = function() {
        this.bPause = !1,
        this.viewUIControl.resetDice(),
        this.chessControl.resetChess(),
        this.pathTipControl.hideTip(),
        this.headUIControl.resetHeadUI(),
        this.pathControl.resetAllPathNode(),
        this.chessControl.hideAllHeTi()
    }
    ,
    t.prototype.gameOver = function() {
        if (!this.bPause) {
            this.gameOverTime = new Date,
            console.log("游戏结束，开始时间:", this.startGameTime, " 结束时间:", this.gameOverTime),
            this.headUIControl.stopCountDown();
            var e = this.chessControl.getChessFinish();
            App.PanelManager.open(PanelConst.RESULT, e)
        }
    }
    ,
    t.prototype.pauseGame = function() {
        console.log("GameScene >> 暂停游戏"),
        this.bPause = !0,
        this.headUIControl.pauseCountDown()
    }
    ,
    t.prototype.resumeGame = function() {
        console.log("GameScene >> 恢复游戏"),
        this.bPause = !1,
        this.headUIControl.resumeCountDown(),
        this.curStatus == GameStatusEnum.CheckActionDice6 ? this.changeState(this.curStatus) : this.curStatus == GameStatusEnum.GameOver && this.changeState(this.curStatus)
    }
    ,
    t.prototype.restartGame = function() {
        egret.Tween.removeAllTweens(),
        this.changeState(GameStatusEnum.WaitOption)
    }
    ,
    t.prototype.resetCurRoleColor = function() {
        var e = App.DataCenter.roleTypeList;
        if (e)
            for (var t = e.length, o = 0; t > o; o++)
                if (e[o] != RoleTypeEnum.Close) {
                    this.curRoleColor = o;
                    break
                }
    }
    ,
    t.prototype.onNextAction = function() {
        this.viewUIControl.removeDiceTouch(),
        this.chessControl.removeChessTouch(),
        this.chessControl.removeChessNumTipTouch(),
        this.curRoleColor++,
        this.curRoleColor > RoleColorEnum.Blue && (this.curRoleColor = RoleColorEnum.Green),
        App.DataCenter.roleTypeList[this.curRoleColor] != RoleTypeEnum.Close && console.log("当前行动玩家:", this.getTestColor(), this.getTestRoleType()),
        this.changeState(GameStatusEnum.Action)
    }
    ,
    t.prototype.onAction = function() {
        this.bAutoAction = !1,
        App.PanelManager.close(PanelConst.SELECT_CHESS),
        this.pathTipControl.hideTip(),
        this.chessControl.stopChessJump(this.curRoleColor);
        var e = App.DataCenter.roleTypeList[this.curRoleColor];
        switch (e) {
        case RoleTypeEnum.Role:
            this.chessControl.sortActionChessTop(),
            this.chessControl.showHeTi(),
            this.headUIControl.startCountDown(this.curRoleColor),
            this.viewUIControl.addDiceTouch();
            break;
        case RoleTypeEnum.Computer:
            this.chessControl.sortActionChessTop(),
            this.chessControl.showHeTi(),
            this.headUIControl.startCountDown(this.curRoleColor),
            this.onRollDice();
            break;
        case RoleTypeEnum.Close:
            this.onNextAction()
        }
    }
    ,
    t.prototype.onRollDice = function() {
        this.viewUIControl.removeDiceTouch();
        var e = App.DataCenter.roleTypeList[this.curRoleColor]
          , t = this.chessControl.getChessListByStatus(this.curRoleColor, ChessStatusEnum.DeActive)
          , o = 0
          , n = Math.random();
        e == RoleTypeEnum.Role ? t.length >= 2 && n > .5 && 6 != this.curDiceNum && (o = 6) : t.length >= 4 && n > .5 && 6 != this.curDiceNum && (o = 6),
        0 == o && (o = App.NumberTool.getRandInt(1, 6)),
        this.curDiceNum = o,
        console.log(this.getTestColor() + "掷骰子数:", o),
        this.viewUIControl.playDiceAnim(o)
    }
    ,
    t.prototype.onSelectAction = function() {
        var e = this.curRoleColor
          , t = this.chessControl.getChessListByStatus(e, ChessStatusEnum.DeActive)
          , o = this.chessControl.getChessListByStatus(e, ChessStatusEnum.Active);
        (t.length > 0 || o.length > 0) && this.chessControl.chessJump(e, this.curDiceNum),
        o.length > 0 ? (this.chessControl.addChessTouch(),
        this.chessControl.addChessNumTipTouch(),
        this.pathTipControl.showPathNodeTip(e, this.curDiceNum)) : this.curDiceNum == GameConst.NUM_6 && t.length > 0 ? (this.chessControl.addChessTouch(),
        this.chessControl.addChessNumTipTouch()) : this.changeState(GameStatusEnum.NextAction)
    }
    ,
    t.prototype.onAutoAction = function() {
        var e = this
          , t = this.curRoleColor;
        this.pathTipControl.hideTip(),
        App.PanelManager.close(PanelConst.SELECT_CHESS),
        this.chessControl.removeChessTouch(),
        this.chessControl.removeChessNumTipTouch(),
        this.headUIControl.stopCountDown();
        var o = this.chessControl.getChessListByStatus(t, ChessStatusEnum.DeActive)
          , n = this.chessControl.getChessListByStatus(t, ChessStatusEnum.Active);
        if (this.curDiceNum == GameConst.NUM_6 && o.length > 0) {
            var s = o[0];
            console.log(this.getTestColor(), this.getTestChessType(s), 0 / 0),
            this.chessControl.sortChessTop(s),
            this.pathControl.moveOutAirport(s, function() {
                e.changeState(GameStatusEnum.Action)
            })
        } else if (n.length > 0) {
            var i, r = -99999, a = n.length, h = App.DataCenter.roleTypeList[t];
            if (h == RoleTypeEnum.Computer)
                i = n[App.NumberTool.getRandInt(0, a - 1)];
            else
                for (var l = 0; a > l; l++) {
                    var c = n[l]
                      , p = this.pathControl.checkGoodOrBad(c, this.curDiceNum)
                      , u = p[0];
                    u > r && (r = u,
                    i = c)
                }
            this.chessControl.sortChessTop(i),
            this.pathControl.moveChess([i], this.curDiceNum)
        } else
            this.changeState(GameStatusEnum.NextAction)
    }
    ,
    t.prototype.onCheckGameOver = function() {
        this.chessControl.checkAllFinish() ? this.changeState(GameStatusEnum.GameOver) : this.changeState(GameStatusEnum.CheckActionDice6)
    }
    ,
    t.prototype.onCheckActionDice6 = function() {
        this.bPause || (this.curDiceNum == GameConst.NUM_6 ? this.changeState(GameStatusEnum.Action) : this.changeState(GameStatusEnum.NextAction))
    }
    ,
    t.prototype.countDownComplete = function() {
        this.chessControl.removeChessTouch(),
        this.chessControl.removeChessNumTipTouch(),
        this.bAutoAction = !0,
        this.viewUIControl.removeDiceTouch();
        var e = App.DataCenter.roleTypeList[this.curRoleColor];
        e == RoleTypeEnum.Role && (this.curStatus == GameStatusEnum.Action ? this.changeState(GameStatusEnum.RollDice) : this.curStatus == GameStatusEnum.RollDice || this.curStatus == GameStatusEnum.SelectAction && this.changeState(GameStatusEnum.SelectAction))
    }
    ,
    t.prototype.onSelectChess = function(e) {
        var t = e.data
          , o = this.chessControl.chessList[this.curRoleColor][t];
        this.chessControl.selectChessMove(o)
    }
    ,
    t.prototype.onOpenRule = function() {
        this.curStatus != GameStatusEnum.Null && this.pauseGame()
    }
    ,
    t.prototype.onCloseRule = function() {
        this.curStatus != GameStatusEnum.Null ? this.resumeGame() : this.changeState(GameStatusEnum.WaitOption)
    }
    ,
    t.prototype.getTestColor = function() {
        return ["绿", "红", "黄", "蓝"][this.curRoleColor]
    }
    ,
    t.prototype.getTestRoleType = function() {
        return ["玩家", "电脑", "无人"][App.DataCenter.roleTypeList[this.curRoleColor]]
    }
    ,
    t.prototype.getTestChessType = function(e) {
        return ["神器", "至尊", "氯Cl", "氧O"][e.chessType]
    }
    ,
    t
}(BaseScene);
__reflect(GameScene.prototype, "GameScene");
var HomeScene = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.skinName = "HomeSceneSkin",
        t
    }
    return __extends(t, e),
    t.prototype.childrenCreated = function() {}
    ,
    t.prototype.onEnable = function() {
        this.playAnim(),
        this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTap, this)
    }
    ,
    t.prototype.onRemove = function() {
        this.stopAnim(),
        this.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTap, this)
    }
    ,
    t.prototype.onTouchTap = function(e) {
        switch (e.target) {
        case this.startBtn:
            App.SceneManager.open(SceneConst.GAME);
            break;
        case this.ruleBtn:
            GameConst.HAVE_READ_RULE = !0,
            App.PanelManager.open(PanelConst.RULE)
        }
    }
    ,
    t.prototype.playAnim = function() {
        egret.Tween.get(this.xiyiye, {
            loop: !0
        }).to({
            scaleX: 1.2,
            scaleY: 1.2
        }, 1500).to({
            scaleX: 1,
            scaleY: 1
        }, 1500),
        egret.Tween.get(this.pop, {
            loop: !0
        }).to({
            scaleX: 1.2,
            scaleY: 1.2
        }, 1500).to({
            scaleX: 1,
            scaleY: 1
        }, 1500),
        egret.Tween.get(this.heart, {
            loop: !0
        }).to({
            scaleX: 1.2,
            scaleY: 1.2
        }, 1500).to({
            scaleX: 1,
            scaleY: 1
        }, 1500)
    }
    ,
    t.prototype.stopAnim = function() {
        this.xiyiye.scaleX = this.xiyiye.scaleY = 1,
        this.pop.scaleX = this.xiyiye.scaleY = 1,
        this.heart.scaleX = this.xiyiye.scaleY = 1,
        egret.Tween.removeTweens(this.xiyiye),
        egret.Tween.removeTweens(this.pop),
        egret.Tween.removeTweens(this.heart)
    }
    ,
    t
}(BaseScene);
__reflect(HomeScene.prototype, "HomeScene");
var PreloadScene = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.skinName = "PreloadSceneSkin",
        t
    }
    return __extends(t, e),
    t.prototype.childrenCreated = function() {
        this.progressBar.mask = this.progressMask,
        this.setProgress(0),
        this.dice.totalLoop = Number.MAX_VALUE,
        this.dice.play(6),
        this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.onRemoveFromStage, this)
    }
    ,
    t.prototype.onRemoveFromStage = function() {
        this.dice.stopTimer(),
        this.removeEventListener(egret.Event.REMOVED_FROM_STAGE, this.onRemoveFromStage, this)
    }
    ,
    t.prototype.setProgress = function(e) {
        this.progressMask.scaleX = e / 100
    }
    ,
    t
}(BaseScene);
__reflect(PreloadScene.prototype, "PreloadScene");
var Chess = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.curIndex = 0,
        t.bJumping = !1,
        t
    }
    return __extends(t, e),
    t.prototype.childrenCreated = function() {
        this.chessTexture = this.texture,
        this.finishTexture = RES.getRes("game_chessFinish_png")
    }
    ,
    t.prototype.setChessSkin = function() {
        this.texture = this.chessTexture
    }
    ,
    t.prototype.setFinish = function() {
        this.texture = this.finishTexture
    }
    ,
    t
}(eui.Image);
__reflect(Chess.prototype, "Chess");
var ChessNumTip = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.bgList = [],
        t.labelList = [],
        t.skinName = "ChessNumTipSkin",
        t
    }
    return __extends(t, e),
    t.prototype.childrenCreated = function() {
        this.touchChildren = !1;
        for (var e = 0; 4 > e; e++)
            this.bgList.push(this.getChildAt(e)),
            this.labelList.push(this.getChildAt(e + 4))
    }
    ,
    t.prototype.onEnable = function() {}
    ,
    t.prototype.onRemove = function() {}
    ,
    t.prototype.show = function(e) {
        for (var t = 0; 4 > t; t++)
            this.bgList[t].visible = !1,
            this.labelList[t].visible = !1;
        var o = e[0][0];
        this.x = o.x - this.width / 2 + o.width / 2,
        this.y = o.y - this.height;
        for (var n = 0, s = e.length, t = 0; s > t; t++)
            if (e[t].length > 0) {
                o = e[t][0];
                var i = this.bgList[n];
                i.visible = !0,
                i.texture = RES.getRes("chessNumTip" + o.roleColor + "_png");
                var r = this.labelList[n];
                r.visible = !0,
                r.text = e[t].length,
                n++
            }
        console.log("叠加棋子显示位置:", this.x, this.y, " 父对象:", this.parent, "路径棋子数:", n);
        var a = this.bgList[0].width;
        1 == n ? (this.bgList[0].x = (this.width - a) / 2,
        this.labelList[0].x = (this.width - a) / 2) : 2 == n ? (this.bgList[0].x = this.width / 2 - a,
        this.labelList[0].x = this.width / 2 - a,
        this.bgList[1].x = this.width / 2,
        this.labelList[1].x = this.width / 2) : 3 == n ? (this.bgList[0].x = this.width / 2 - 1.5 * a,
        this.labelList[0].x = this.width / 2 - 1.5 * a,
        this.bgList[1].x = this.width / 2 - a / 2,
        this.labelList[1].x = this.width / 2 - a / 2,
        this.bgList[2].x = this.width / 2 + .5 * a,
        this.labelList[2].x = this.width / 2 + .5 * a) : 4 == n && (this.bgList[0].x = this.width / 2 - 2 * a,
        this.labelList[0].x = this.width / 2 - 2 * a,
        this.bgList[1].x = this.width / 2 - a,
        this.labelList[1].x = this.width / 2 - a,
        this.bgList[2].x = this.width / 2,
        this.labelList[2].x = this.width / 2,
        this.bgList[3].x = this.width / 2 + a,
        this.labelList[3].x = this.width / 2 + a)
    }
    ,
    t.prototype.hide = function() {
        this.parent && this.parent.removeChild(this)
    }
    ,
    t
}(eui.Component);
__reflect(ChessNumTip.prototype, "ChessNumTip");
var Dice = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.animList = [],
        t.numList = [],
        t.delay = 1e3 / 15,
        t.totalFrame = 3,
        t.curFrame = 1,
        t.totalLoop = 4,
        t.curLoop = 1,
        t.diceNum = 0,
        t
    }
    return __extends(t, e),
    t.prototype.childrenCreated = function() {
        for (var e = 0; 3 > e; e++)
            this.animList.push(RES.getRes("dice_anim" + e + "_png"));
        for (var e = 0; 6 > e; e++)
            this.numList.push(RES.getRes("dice_num" + e + "_png"));
        this.touchEnabled = !1
    }
    ,
    t.prototype.play = function(e) {
        this.diceNum = e,
        this.reset(),
        this.startTimer()
    }
    ,
    t.prototype.gotoAndStop = function(e) {
        this.diceNum = e,
        this.texture = this.numList[this.diceNum - 1]
    }
    ,
    t.prototype.reset = function() {
        this.curFrame = 1,
        this.curLoop = 1,
        this.source = this.animList[this.curFrame - 1]
    }
    ,
    t.prototype.startTimer = function() {
        this.animTimer || (this.animTimer = new egret.Timer(this.delay)),
        this.animTimer.addEventListener(egret.TimerEvent.TIMER, this.onTimerHandler, this),
        this.animTimer.reset(),
        this.animTimer.start()
    }
    ,
    t.prototype.onTimerHandler = function() {
        var e = this;
        if (this.curFrame++,
        this.curFrame > this.totalFrame) {
            if (this.curLoop++,
            this.curLoop > this.totalLoop)
                return this.stopTimer(),
                this.texture = this.numList[this.diceNum - 1],
                void egret.Tween.get(this).wait(500).call(function() {
                    e.dispatchEvent(new egret.Event(egret.Event.COMPLETE))
                }, this);
            this.curFrame = 1
        }
        this.texture = this.animList[this.curFrame - 1]
    }
    ,
    t.prototype.stopTimer = function() {
        this.animTimer && (this.animTimer.removeEventListener(egret.TimerEvent.TIMER, this.onTimerHandler, this),
        this.animTimer.stop())
    }
    ,
    t
}(eui.Image);
__reflect(Dice.prototype, "Dice");
var DiceClick = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.skinName = "DiceClickSkin",
        t
    }
    return __extends(t, e),
    t.prototype.childrenCreated = function() {}
    ,
    t.prototype.onEnable = function() {}
    ,
    t.prototype.onRemove = function() {}
    ,
    t.prototype.show = function() {
        var e = this;
        this.visible = !0,
        this.click0.visible = !0,
        this.click1.visible = !1,
        egret.Tween.get(this, {
            loop: !0
        }).wait(500).call(function() {
            e.click0.visible = !1,
            e.click1.visible = !0
        }, this).wait(500).call(function() {
            e.click0.visible = !0,
            e.click1.visible = !1
        }, this)
    }
    ,
    t.prototype.hide = function() {
        this.visible = !1,
        egret.Tween.removeTweens(this)
    }
    ,
    t
}(eui.Component);
__reflect(DiceClick.prototype, "DiceClick");
var HeadUI = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.skinName = "",
        t.touchEnabled = !1,
        t.touchChildren = !1,
        t
    }
    return __extends(t, e),
    t.prototype.childrenCreated = function() {
        this.headImg.mask = this.headMask,
        this.nameLabel.maxChars = 4,
        this.bgList = [this.bg0, this.bg1, this.bg2, this.bg3],
        this.selectBgList = [this.bg00, this.bg11, this.bg22, this.bg33],
        this.reset()
    }
    ,
    t.prototype.setName = function(e) {
        this.nameLabel.text = e
    }
    ,
    t.prototype.setHeadImg = function(e) {
        this.headImg.visible = !0,
        this.headImg.texture = RES.getRes(e)
    }
    ,
    t.prototype.setWxHeadImg = function(e) {
        this.headImg.visible = !0,
        this.headImg.source = App.WxContent.userInfo.headimgurl
    }
    ,
    t.prototype.startCountDown = function() {
        this.resetCountDown(),
        this.setHeadSelected(!0),
        this.timeLabel.text = GameConst.COUNT_DOWN_TIME + "",
        this.timer || (this.timer = new egret.Timer(1e3)),
        this.timer.addEventListener(egret.TimerEvent.TIMER, this.onTimerHandler, this),
        this.timer.reset(),
        this.timer.start(),
        this.timeImg.visible = !0,
        egret.Tween.get(this.timeImg, {
            loop: !0
        }).to({
            rotation: 360
        }, 2e3)
    }
    ,
    t.prototype.onTimerHandler = function() {
        this.timeLabel.text = GameConst.COUNT_DOWN_TIME - this.timer.currentCount + "",
        this.timer.currentCount >= GameConst.COUNT_DOWN_TIME && (this.stopCountDown(),
        this.dispatchEventWith(egret.TimerEvent.TIMER_COMPLETE))
    }
    ,
    t.prototype.stopCountDown = function() {
        this.timer && (this.timer.removeEventListener(egret.TimerEvent.TIMER, this.onTimerHandler, this),
        this.timer.stop()),
        egret.Tween.removeTweens(this),
        this.setHeadSelected(!1)
    }
    ,
    t.prototype.resetCountDown = function() {
        this.stopCountDown(),
        this.timeLabel.text = "",
        this.timeImg.visible = !1,
        this.timeImg.rotation = 0
    }
    ,
    t.prototype.pauseCountDown = function() {
        this.timer && this.timer.stop()
    }
    ,
    t.prototype.resumeCountDown = function() {
        this.timer && this.timer.start()
    }
    ,
    t.prototype.changeHeadTexture = function(e) {
        this.roleColor = e;
        for (var t = this.bgList.length, o = 0; t > o; o++)
            this.bgList[o].visible = !1;
        this.bgList[e].visible = !0,
        this.timeImg.texture = RES.getRes(GameConst.HeadTimeTexture[e])
    }
    ,
    t.prototype.setHeadSelected = function(e) {
        this.selectBgList[this.roleColor].visible = e,
        this.bgList[this.roleColor].visible = !e
    }
    ,
    t.prototype.reset = function() {
        for (var e = 0; 4 > e; e++)
            this.selectBgList[e].visible = !1;
        this.timeImg.rotation = 0,
        this.timeImg.visible = !1,
        this.timeLabel.text = "",
        this.headImg.visible = !1,
        this.nameLabel.text = ""
    }
    ,
    t
}(eui.Component);
__reflect(HeadUI.prototype, "HeadUI");
var MessageBox = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.skinName = "MessageBoxSkin",
        t.percentWidth = 100,
        t.percentHeight = 100,
        t
    }
    return __extends(t, e),
    t.prototype.childrenCreated = function() {}
    ,
    t.prototype.showMsg = function(e, t, o) {
        void 0 === t && (t = null),
        void 0 === o && (o = null),
        this.callBack = t,
        this.thisObject = o,
        this.msgLabel.text = e,
        this.okBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.hide, this)
    }
    ,
    t.prototype.hide = function() {
        this.parent && this.parent.removeChild(this),
        this.callBack && this.thisObject && this.callBack.apply(this.thisObject)
    }
    ,
    t
}(eui.Component);
__reflect(MessageBox.prototype, "MessageBox");
var PathNode = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.chessList = [],
        t.index = 0,
        t.totalChessNum = 0,
        t
    }
    return __extends(t, e),
    t.prototype.childrenCreated = function() {
        for (var e = 0; e < GameConst.MAX_PLAYER_NUM; e++)
            this.chessList[e] = []
    }
    ,
    t.prototype.reset = function() {
        for (var e = 0; 4 > e; e++)
            for (var t = 0; 4 > t; t++)
                this.chessList[e][t] = null;
        this.totalChessNum = 0
    }
    ,
    t
}(eui.Image);
__reflect(PathNode.prototype, "PathNode");
var SelectRoleBtn = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.touchChildren = !1,
        t
    }
    return __extends(t, e),
    t.prototype.childrenCreated = function() {
        this.setRoleType(0),
        this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTap, this)
    }
    ,
    t.prototype.onTouchTap = function(e) {
        this.roleType++,
        this.roleType > RoleTypeEnum.Close && (this.roleType = RoleTypeEnum.Role),
        this.setRoleType(this.roleType)
    }
    ,
    t.prototype.setRoleType = function(e) {
        this.roleImg.visible = !1,
        this.computerImg.visible = !1,
        this.closeImg.visible = !1,
        this.roleType = e,
        this.roleType == RoleTypeEnum.Role ? this.roleImg.visible = !0 : this.roleType == RoleTypeEnum.Computer ? this.computerImg.visible = !0 : this.roleType == RoleTypeEnum.Close && (this.closeImg.visible = !0)
    }
    ,
    t
}(eui.Component);
__reflect(SelectRoleBtn.prototype, "SelectRoleBtn");
var ScrollView = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.curItemCount = 0,
        t.delayScroll = 250,
        t.bScrolling = !1,
        t
    }
    return __extends(t, e),
    t.prototype.childrenCreated = function() {
        this.validateNow();
        var e = this.viewport.contentWidth - this.viewport.width;
        e > 0 ? (this.isHScroller = !0,
        this.itemSize = this.viewport.width,
        this.itemNum = this.viewport.contentWidth / this.viewport.width) : (this.isHScroller = !1,
        this.itemSize = this.viewport.height,
        this.itemNum = this.viewport.contentHeight / this.viewport.height),
        this.throwSpeed = 0,
        this.bounces = !0,
        this.addEventListener(eui.UIEvent.CHANGE_START, this.onChangeStartHandler, this),
        this.addEventListener(eui.UIEvent.CHANGE_END, this.onChangeEndHandler, this)
    }
    ,
    t.prototype.start = function() {
        this.touchEnabled = !0,
        this.touchChildren = !0
    }
    ,
    t.prototype.stop = function() {
        this.touchEnabled = !1,
        this.touchChildren = !1
    }
    ,
    t.prototype.onChangeStartHandler = function() {
        console.log("ItemScroller >> change start"),
        this.isHScroller ? this.touchStartPos = this.viewport.scrollH : this.touchStartPos = this.viewport.scrollV
    }
    ,
    t.prototype.onChangeEndHandler = function() {
        if (console.log("ItemScroller >> change end"),
        -1 != this.touchStartPos) {
            var e;
            e = this.isHScroller ? this.viewport.scrollH - this.touchStartPos : this.viewport.scrollV - this.touchStartPos,
            e > 0 ? this.scrollToNext() : 0 > e && this.scrollToLast(),
            this.touchStartPos = -1
        }
    }
    ,
    t.prototype.scrollToNext = function() {
        if (!this.bScrolling) {
            var e = this.curItemCount;
            e < this.itemNum - 1 && e++,
            this.scrollToItem(e)
        }
    }
    ,
    t.prototype.scrollToLast = function() {
        if (!this.bScrolling) {
            var e = this.curItemCount;
            e > 0 && e--,
            this.scrollToItem(e)
        }
    }
    ,
    t.prototype.scrollToItem = function(e) {
        var o = this;
        this.bScrolling || e >= 0 && e < this.itemNum && (this.bScrolling = !0,
        this.disableTouch(),
        this.curItemCount = e,
        egret.Tween.removeTweens(this.viewport),
        this.isHScroller ? egret.Tween.get(this.viewport).to({
            scrollH: e * this.itemSize,
            ease: egret.Ease.quadOut
        }, this.delayScroll) : egret.Tween.get(this.viewport).to({
            scrollV: e * this.itemSize,
            ease: egret.Ease.quadOut
        }, this.delayScroll),
        egret.Tween.get(this.viewport).wait(this.delayScroll).call(function() {
            o.bScrolling = !1,
            o.enableTouch(),
            o.dispatchEventWith(t.EVENT_SCROLL_COMPLETE, !1, o.curItemCount)
        }, this))
    }
    ,
    t.prototype.enableTouch = function() {
        this.touchEnabled = !0,
        this.touchChildren = !0
    }
    ,
    t.prototype.disableTouch = function() {
        this.touchChildren = !1,
        this.touchEnabled = !1
    }
    ,
    t.prototype.destroy = function() {}
    ,
    t
}(eui.Scroller);
ScrollView.EVENT_SCROLL_COMPLETE = "EVENT_SCROLL_COMPLETE",
__reflect(ScrollView.prototype, "ScrollView");
var ArrayTool = function(e) {
    function t() {
        return e.apply(this, arguments) || this
    }
    return __extends(t, e),
    t.prototype.getObjectLen = function(e) {
        var t = 0;
        for (var o in e)
            t++;
        return t
    }
    ,
    t.randomArr = function(e) {
        for (var t, o, n, s = e.length; s; )
            o = s - 1,
            n = Math.floor(Math.random() * s),
            s--,
            o != n && (t = e[o],
            e[o] = e[n],
            e[n] = t)
    }
    ,
    t.random2DArr = function(e) {
        for (var o = [], n = e.length, s = e[0].length, i = 0; n > i; i++)
            for (var r = 0; s > r; r++)
                o.push(e[i][r]);
        t.randomArr(o);
        for (var i = 0; n > i; i++)
            for (var r = 0; s > r; r++)
                e[i][r] = o[i * s + r]
    }
    ,
    t.copy2DArr = function(e) {
        for (var t = new Array, o = e.length, n = e[0].length, s = 0; o > s; s++) {
            var i = new Array;
            t.push(i);
            for (var r = 0; n > r; r++)
                i.push(e[s][r])
        }
        return t
    }
    ,
    t
}(SingleClass);
__reflect(ArrayTool.prototype, "ArrayTool");
var BluemoonSDK = function(e) {
    function t() {
        return e.apply(this, arguments) || this
    }
    return __extends(t, e),
    t.prototype.tracking = function(e) {
        window.tracking && (console.log("bluemoon tracking:", e),
        window.tracking.event(e, this.getDate()))
    }
    ,
    t.prototype.getDate = function() {
        var e, t, o, n, s = new Date, i = "-", r = ":", a = s.getMonth() + 1, h = s.getDate(), l = s.getHours(), c = s.getMinutes();
        e = (a >= 1 && 9 >= a ? "0" : "") + a,
        t = (h >= 0 && 9 >= h ? "0" : "") + h,
        o = (l >= 0 && 9 >= l ? "0" : "") + l,
        n = (c >= 0 && 9 >= c ? "0" : "") + c;
        var p = s.getFullYear() + i + e + i + t + " " + o + r + n + r + s.getSeconds();
        return p
    }
    ,
    t
}(SingleClass);
BluemoonSDK.ENTER_GAME = "enter_game",
BluemoonSDK.SHARE_GAME = "share_game",
BluemoonSDK.START_GAME = "start_game",
BluemoonSDK.ENTER_SHOP = "enter_shop",
__reflect(BluemoonSDK.prototype, "BluemoonSDK");
var DateTimer = function(e) {
    function t(t, o) {
        void 0 === o && (o = 0);
        var n = e.call(this) || this;
        return n.delay = t,
        n.repeatCount = o,
        n
    }
    return __extends(t, e),
    t.prototype.start = function() {
        this.previous = egret.getTimer(),
        this.accTime = 0,
        egret.startTick(this.update, this)
    }
    ,
    t.prototype.reset = function() {
        this.previous = egret.getTimer(),
        this.accTime = 0,
        this.currentCount = 0
    }
    ,
    t.prototype.stop = function() {
        egret.stopTick(this.update, this)
    }
    ,
    t.prototype.update = function() {
        for (this.curTime = egret.getTimer(),
        this.passTime = this.curTime - this.previous,
        this.previous = this.curTime,
        this.accTime += this.passTime; this.accTime >= this.delay; )
            this.accTime -= this.delay,
            this.currentCount++,
            this.repeatCount > 0 && this.currentCount == this.repeatCount && (this.dispatchEvent(new egret.TimerEvent(egret.TimerEvent.TIMER_COMPLETE)),
            this.stop()),
            this.dispatchEvent(new egret.TimerEvent(egret.TimerEvent.TIMER));
        return !1
    }
    ,
    t
}(egret.EventDispatcher);
__reflect(DateTimer.prototype, "DateTimer");
var ThemeAdapter = function() {
    function e() {}
    return e.prototype.getTheme = function(e, t, o, n) {
        function s(e) {
            t.call(n, e)
        }
        function i(t) {
            t.resItem.url == e && (RES.removeEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, i, null),
            o.call(n))
        }
        RES.addEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, i, null),
        RES.getResByUrl(e, s, this, RES.ResourceItem.TYPE_TEXT)
    }
    ,
    e
}();
__reflect(ThemeAdapter.prototype, "ThemeAdapter", ["eui.IThemeAdapter"]);
var AssetAdapter = function() {
    function e() {}
    return e.prototype.getAsset = function(e, t, o) {
        function n(n) {
            t.call(o, n, e)
        }
        if (RES.hasRes(e)) {
            var s = RES.getRes(e);
            s ? n(s) : RES.getResAsync(e, n, this)
        } else
            RES.getResByUrl(e, n, this, RES.ResourceItem.TYPE_IMAGE)
    }
    ,
    e
}();
__reflect(AssetAdapter.prototype, "AssetAdapter", ["eui.IAssetAdapter"]);
var Main = function(e) {
    function t() {
        return e.apply(this, arguments) || this
    }
    return __extends(t, e),
    t.prototype.createChildren = function() {
        e.prototype.createChildren.call(this);
        var t = new AssetAdapter;
        egret.registerImplementation("eui.IAssetAdapter", t),
        egret.registerImplementation("eui.IThemeAdapter", new ThemeAdapter),
        App.VersionManager.init(),
        App.ResUtils.addConfig("resource/default.res.json", "resource/"),
        App.ResUtils.loadConfig(this.onConfigComplete, this)
    }
    ,
    t.prototype.onConfigComplete = function(e) {
        var t = new eui.Theme("resource/default.thm.json",this.stage);
        t.addEventListener(eui.UIEvent.COMPLETE, this.onThemeLoadComplete, this)
    }
    ,
    t.prototype.onThemeLoadComplete = function() {
        App.ResUtils.loadGroup(AssetConst.Preload, this.onPreloadComplete, this)
    }
    ,
    t.prototype.onPreloadComplete = function(e) {
        App.StageUtils.init(this.stage),
        App.StageUtils.changeStageMode(),
        this.preloadScene = new PreloadScene,
        this.addChild(this.preloadScene);
        var t = [AssetConst.Home, AssetConst.Game, AssetConst.Option, AssetConst.Rule, AssetConst.Knowledge, AssetConst.Bgm];
        App.ResUtils.loadGroups("AllRes", t, this.onResComplete, this.onResProgress, this)
    }
    ,
    t.prototype.onResProgress = function(e) {
        this.preloadScene.setProgress(Math.round(e.itemsLoaded / e.itemsTotal * 100))
    }
    ,
    t.prototype.onResComplete = function() {
        this.removeChild(this.preloadScene),
        this.preloadScene = null,
        App.getInstance().registerCommand(CmdConst.STARTUP, StartupCommand),
        App.getInstance().sendNotification(CmdConst.STARTUP),
        App.getInstance().removeCommand(CmdConst.STARTUP)
    }
    ,
    t
}(eui.UILayer);
__reflect(Main.prototype, "Main");
var SocketConst = function() {
    function e() {}
    return e
}();
SocketConst.SOCKET_CONNECT = "SOCKET_CONNECT",
SocketConst.SOCKET_ERROR = "SOCKET_ERROR",
SocketConst.SOCKET_CLOSE = "SOCKET_CLOSE",
SocketConst.SOCKET_RECONNECT = "SOCKET_RECONNECT",
__reflect(SocketConst.prototype, "SocketConst");
